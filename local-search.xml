<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>重学容器-01：Docker、Containerd、Kubernetes之间的渊源</title>
    <link href="/2023/05/17/%E9%87%8D%E5%AD%A6%E5%AE%B9%E5%99%A8-01%EF%BC%9ADocker%E3%80%81Containerd%E3%80%81Kubernetes%E4%B9%8B%E9%97%B4%E7%9A%84%E6%B8%8A%E6%BA%90/"/>
    <url>/2023/05/17/%E9%87%8D%E5%AD%A6%E5%AE%B9%E5%99%A8-01%EF%BC%9ADocker%E3%80%81Containerd%E3%80%81Kubernetes%E4%B9%8B%E9%97%B4%E7%9A%84%E6%B8%8A%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<p>话说Kubernetes都弃用Dockershim了，因此是时候学习Containerd了。 本文先简单整理一下Kubernetes、Docker、Containerd之间的渊源和纠葛。</p><p>1.Docker, OCI和Containerd<br>这里略过早期Docker的发展历史，大概就是在docker如日中天的时候，社区要搞容器化标准，成立了OCI(Open Container Initiaiv)，OCI主要包含两个规范，一个是容器运行时规范(runtime-spec)，一个是容器镜像规范(image-spec)。 docker的公司也在OCI中，这里略过在推动标准化过程中各大厂各自心里的”小算盘”和”利益考虑”，docker在这个过程中由一个庞然大物逐渐拆分出了containerd、runc等项目， docker公司将runc捐赠给了OCI，后来将containerd捐赠给了CNCF。</p><p>runc是什么? runc是一个轻量级的命令行工具，可以用它来运行容器。runc遵循OCI标准来创建和运行容器，它算是第一个OCI Runtime标准的参考实现。<br>containerd是什么？containerd的自我介绍中说它是一个开放、可靠的容器运行时，实际上它包含了单机运行一个容器运行时的功能。 containerd为了支持多种OCI Runtime实现，内部使用containerd-shim，shim英文翻译过来是”垫片”的意思，见名知义了，例如为了支持runc，就提供了containerd-shim-runc。<br>经过上面的发展，docker启动一个容器的过程大致是下图所示的流程:</p><p><img src="/2023/05/17/%E9%87%8D%E5%AD%A6%E5%AE%B9%E5%99%A8-01%EF%BC%9ADocker%E3%80%81Containerd%E3%80%81Kubernetes%E4%B9%8B%E9%97%B4%E7%9A%84%E6%B8%8A%E6%BA%90/docker-run-container.png"></p><p>从上图可以看出，每启动一个容器，实际上是containerd启动了一个containerd-shim-runc进程，即使containerd的挂掉也不会影响到已经启动的容器。</p><p>2.Kubernetes, Docker和Containerd<br>kubernetes的出现是为了解决容器编排的问题，在早期为了支持多个容器引擎，是在Kubernetes内部对多个容器引擎做兼容，例如kubelet启动一个docker-manager的进程直接调用docker的api进行容器的创建。</p><p><img src="/2023/05/17/%E9%87%8D%E5%AD%A6%E5%AE%B9%E5%99%A8-01%EF%BC%9ADocker%E3%80%81Containerd%E3%80%81Kubernetes%E4%B9%8B%E9%97%B4%E7%9A%84%E6%B8%8A%E6%BA%90/kubelet-run-containerd-0.png"></p><p>后来k8s为了隔离各个容器引擎之间的差异，在docker分出containerd后，k8s也搞出了自己的容器运行时接口(CRI)，CRI的出现是为了统一k8s与不同容器引擎之间交互的接口，与OCI的容器运行时规范不同，CRI更加适合k8s，不仅包含对容器的管理，还引入了k8s中Pod的概念及对Pod生命周期的管理。 k8s开始把containerd接入CRI标准。kubelet通过CRI接口调用docker-shim，进一步调用docker api。此时在每个k8s节点上kubelet大致按下图流程启动容器:</p><p><img src="/2023/05/17/%E9%87%8D%E5%AD%A6%E5%AE%B9%E5%99%A8-01%EF%BC%9ADocker%E3%80%81Containerd%E3%80%81Kubernetes%E4%B9%8B%E9%97%B4%E7%9A%84%E6%B8%8A%E6%BA%90/kubelet-run-containerd-1.png"></p><p>为了更好的将containerd接入到CRI标准中，k8s又搞出了cri-containerd项目，cri-containerd是一个守护进程用来实现kubelet和containerd之间的交互，此时k8s节点上kubelet大致按下图流程启动容器:</p><p><img src="/2023/05/17/%E9%87%8D%E5%AD%A6%E5%AE%B9%E5%99%A8-01%EF%BC%9ADocker%E3%80%81Containerd%E3%80%81Kubernetes%E4%B9%8B%E9%97%B4%E7%9A%84%E6%B8%8A%E6%BA%90/kubelet-run-containerd-2.png"></p><p>在上图中cri-containerd和containerd还是两个独立的进程，他们之间通过gRPC通信，后来在Containerd 1.1时，将cri-containerd改成了Containerd的CRI插件，CRI插件位于containerd内部，这让k8s启动Pod时的通信更加高效，此时k8s节点上kubelet大致按下图流程启动容器:</p><p><img src="/2023/05/17/%E9%87%8D%E5%AD%A6%E5%AE%B9%E5%99%A8-01%EF%BC%9ADocker%E3%80%81Containerd%E3%80%81Kubernetes%E4%B9%8B%E9%97%B4%E7%9A%84%E6%B8%8A%E6%BA%90/kubelet-run-containerd-3.png"></p><p>为了更贴近OCI，k8s又搞了一个轻量级的容器运行时cri-o，所以在k8s”抛弃”dockershim后，可供我们选择的容器运行时有containerd和cri-o。</p><p>小结一下kubelet启动容器的发展历程:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">早期: kubelet --&gt; docker-manager --&gt; docker<br>中期: kubelet -CRI-&gt; docker-shim --&gt; docker --&gt; containerd --&gt; runc<br>中期: kubelet -CRI-&gt; cri-containerd --&gt; containerd --&gt; runc<br>当前: kubelet -CRI-&gt; containerd(CRI plugin) --&gt; runc<br>当前: kubelet -CRI-&gt; cri-o --&gt; runc<br></code></pre></td></tr></table></figure><p>3.总结<br>docker是一个伟大的项目，在理清Kubernetes、Containerd和Docker之间的关系后，可以看出docker为oci贡献了runtime spec的标准参考实现runc，另外oci的image spec镜像规范也是以Docker镜像规范V2为基础制定的，docker还为k8s贡献了一个稳定可靠的容器运行时containerd。 虽然k8s后续将不再支持dockershim，但Docker本身仍然可以作为本地开发、测试和单机容器部署的利器。</p><p>大致了解了containerd、runc、docker都是什么后，下一阶段我们一起来学习如何部署containerd这个容器运行时，并体验启动一个containerd容器。</p>]]></content>
    
    
    <categories>
      
      <category>kubernetes</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang-执行特殊字符的shell</title>
    <link href="/2023/04/13/golang-%E6%89%A7%E8%A1%8C%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E7%9A%84shell/"/>
    <url>/2023/04/13/golang-%E6%89%A7%E8%A1%8C%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E7%9A%84shell/</url>
    
    <content type="html"><![CDATA[<ol><li>示例:</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;log&quot;</span><br>    <span class="hljs-string">&quot;os/exec&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    cmd := exec.Command(<span class="hljs-string">&quot;ls&quot;</span>, <span class="hljs-string">&quot;-l&quot;</span>, <span class="hljs-string">&quot;/var/log/*.log&quot;</span>)<br>    out, err := cmd.CombinedOutput()<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>           fmt.Printf(<span class="hljs-string">&quot;combined out:\n%s\n&quot;</span>, <span class="hljs-type">string</span>(out))<br>     log.Fatalf(<span class="hljs-string">&quot;cmd.Run() failed with %s\n&quot;</span>, err)<br>    &#125;<br>    fmt.Printf(<span class="hljs-string">&quot;combined out:\n%s\n&quot;</span>, <span class="hljs-type">string</span>(out))<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>报错</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">$ <span class="hljs-keyword">go</span> run demo.<span class="hljs-keyword">go</span> <br>combined out:<br>ls: cannot access /<span class="hljs-keyword">var</span>/log<span class="hljs-comment">/*.log: No such file or directory</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">2020/11/11 19:46:00 cmd.Run() failed with exit status 2</span><br><span class="hljs-comment">exit status 1</span><br></code></pre></td></tr></table></figure><ol start="3"><li>改进</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;log&quot;</span><br>    <span class="hljs-string">&quot;os/exec&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> des = <span class="hljs-string">&quot;/var/log/*.log&quot;</span><br>    cmd := exec.Command(<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, fmt.Sprintf(<span class="hljs-string">`ls -al %s`</span>, des))  <span class="hljs-comment">// 此处不能使用 &quot;ls -al&quot; , 还是会报错.</span><br>    out, err := cmd.CombinedOutput()<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>     fmt.Printf(<span class="hljs-string">&quot;combined out:\n%s\n&quot;</span>, <span class="hljs-type">string</span>(out))<br>     log.Fatalf(<span class="hljs-string">&quot;cmd.Run() failed with %s\n&quot;</span>, err)<br>    &#125;<br>    fmt.Printf(<span class="hljs-string">&quot;combined out:\n%s\n&quot;</span>, <span class="hljs-type">string</span>(out))<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> run main.<span class="hljs-keyword">go</span> <br>combined out:<br>-rw-r--r-- <span class="hljs-number">1</span> root root    <span class="hljs-number">0</span> Aug  <span class="hljs-number">8</span>  <span class="hljs-number">2019</span> /<span class="hljs-keyword">var</span>/log/boot.log<br>-rw------- <span class="hljs-number">1</span> root root <span class="hljs-number">3746</span> Mar <span class="hljs-number">31</span> <span class="hljs-number">16</span>:<span class="hljs-number">26</span> /<span class="hljs-keyword">var</span>/log/yum.log<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo-删除文章</title>
    <link href="/2023/03/23/hexo-%E5%88%A0%E9%99%A4%E6%96%87%E7%AB%A0/"/>
    <url>/2023/03/23/hexo-%E5%88%A0%E9%99%A4%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="未发布文章"><a href="#未发布文章" class="headerlink" title="未发布文章"></a>未发布文章</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs text">Hexo正常删除文章的流程是先删除本地文件。<br><br>以原始文件：helloworld.md为例：<br><br>首先进入到source / _post 文件夹中，找到helloworld.md文件，在本地直接执行删除。<br><br>然后依次执行命令：<br>hexo clean<br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure><h2 id="已发布文章"><a href="#已发布文章" class="headerlink" title="已发布文章"></a>已发布文章</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text"><br>如果你已经将文章git发布了，此时会在本地创建一个名为 .deploy_git的文件夹，并将生成的文件复制到该文件夹。<br>你需要删除本地的文章后，参见上面的步骤<br>再删除 .deploy_git文件夹。<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pipeline-最佳实践-7-变量使用</title>
    <link href="/2023/03/23/pipeline-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-7-%E5%8F%98%E9%87%8F%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/03/23/pipeline-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-7-%E5%8F%98%E9%87%8F%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>pipeline中可以定义变量的位置很多，每种方法生效的范围也不相同。</p><h2 id="def"><a href="#def" class="headerlink" title="def"></a>def</h2><ol><li>定义在 pipeline 节之外 生效范围: 整个pipeline流水线.</li></ol><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">// ssh</span><br><span class="hljs-keyword">def</span> ssh_port = <span class="hljs-string">&quot;2222&quot;</span><br><br></code></pre></td></tr></table></figure><ol start="2"><li>定义在 stage , 生效范围: 当前 stage中.</li></ol><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs groovy">stage &#123;<br>    <span class="hljs-keyword">def</span> current_user = admin<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="parameters"><a href="#parameters" class="headerlink" title="parameters"></a>parameters</h2><p>parameters 中可以使用的 参数定义类型有很多,在此处不延伸展开.在单独的文章中详细介绍.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs groovy">pipeline &#123;<br>    agent any<br><br>    options &#123;<br>        ansiColor(<span class="hljs-string">&#x27;xterm&#x27;</span>)<br>    &#125;<br><br>    parameters &#123;<br>        choice (<span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;arch&#x27;</span>, <span class="hljs-attr">choices:</span> [<span class="hljs-string">&#x27;aarch64&#x27;</span>, <span class="hljs-string">&#x27;x86_64&#x27;</span>], <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;选择CPU架构&#x27;</span>)<br>        booleanParam (<span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;basic_rpm_need&#x27;</span>, <span class="hljs-attr">defaultValue:</span> <span class="hljs-literal">true</span>, <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;是否导出基础环境RPM包：openjdk，sm_python_env&#x27;</span>) <br>        booleanParam (<span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;system_rpm_need&#x27;</span>, <span class="hljs-attr">defaultValue:</span> <span class="hljs-literal">true</span>, <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;是否导出RPM包：browser360，expect ...&#x27;</span>) <br>    &#125;<br><br>    ...<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="environment"><a href="#environment" class="headerlink" title="environment"></a>environment</h2><p>environment 定义的是 环境变量.<br>环境变量的作用范围，取决你environment{…}所写的位置，你可以写在顶层环境变量，让所有的stage下的step共享这些变量，也可以单独定义在某一个stage下，只能供这个stage去调用变量，其他的stage不能共享这些变量。</p><p>可以在 stages 节之外 ,也就是全局.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs groovy">pipeline &#123;<br>    agent &#123;<br>        label <span class="hljs-string">&#x27;!windows&#x27;</span><br>    &#125;<br><br>    environment &#123;<br>        DISABLE_AUTH = <span class="hljs-string">&#x27;true&#x27;</span> <span class="hljs-comment">// 值必须用单双引号括起来</span><br>        DB_ENGINE    = <span class="hljs-string">&#x27;sqlite&#x27;</span><br>    &#125;<br><br>    stages &#123;<br>        stage(<span class="hljs-string">&#x27;Build&#x27;</span>) &#123;<br>            steps &#123;<br>                echo <span class="hljs-string">&quot;Database engine is $&#123;DB_ENGINE&#125;&quot;</span><br>                echo <span class="hljs-string">&quot;DISABLE_AUTH is $&#123;DISABLE_AUTH&#125;&quot;</span><br>                sh <span class="hljs-string">&#x27;printenv&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以定义在stages 和 stage 节中 定义, 变量也只在当前 stages 和 stage 中生效.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs groovy">stage(<span class="hljs-string">&#x27;example&#x27;</span>)&#123;<br>    environment &#123;<br>        MACHIME = <span class="hljs-string">&quot;$&#123;params.arch&#125;&quot;</span><br>    &#125;<br>...<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="env"><a href="#env" class="headerlink" title="env"></a>env</h2><p>通过 env 关键字暴露出来的全局变量，可以在 Jenkins 文件的任何位置使用<br>jenkins已经在job运行过程中内置了一些环境变量.</p><p>引用示例:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-keyword">def</span> JOB_NAME = <span class="hljs-string">&quot;$&#123;env.JOB_NAME&#125;&quot;</span><br><span class="hljs-keyword">def</span> BUILD_NUMBER = <span class="hljs-string">&quot;$&#123;env.BUILD_NUMBER&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>定义新的环境变量</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs groovy">env.parentdir = <span class="hljs-string">&quot;example/subdir&quot;</span><br><span class="hljs-keyword">def</span> parentdir = <span class="hljs-string">&quot;$&#123;env.parentdir&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>重写变量 withEnv</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs groovy">environment &#123;<br>     FOO = <span class="hljs-string">&quot;你当像鸟飞往你的山&quot;</span><br>     NAME = <span class="hljs-string">&quot;Tan&quot;</span><br> &#125;<br><br>withEnv([<span class="hljs-string">&quot;FOO=Educated&quot;</span>]) &#123; <br>       <span class="hljs-comment">// 应该打印 &quot;FOO = Educated&quot;</span><br>     echo <span class="hljs-string">&quot;FOO = $&#123;env.FOO&#125;&quot;</span> <br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>jenkins</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jenkins</tag>
      
      <tag>pipeline</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pipeline-最佳实践-9-变量判断</title>
    <link href="/2023/03/23/pipeline-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-9-%E5%8F%98%E9%87%8F%E5%88%A4%E6%96%AD/"/>
    <url>/2023/03/23/pipeline-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-9-%E5%8F%98%E9%87%8F%E5%88%A4%E6%96%AD/</url>
    
    <content type="html"><![CDATA[<h2 id="如何判断变量是否存在"><a href="#如何判断变量是否存在" class="headerlink" title="如何判断变量是否存在"></a>如何判断变量是否存在</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-keyword">if</span> (env.CHANGE_ID) &#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="parameters中的参数条件判断"><a href="#parameters中的参数条件判断" class="headerlink" title="parameters中的参数条件判断"></a>parameters中的参数条件判断</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-keyword">if</span> ( params.plugin_name == <span class="hljs-string">&quot;all&quot;</span> ) &#123;<br>    echo <span class="hljs-string">&quot;产出全部Tools插件制品&quot;</span><br>    plugin_list.each() &#123;<br>        echo it<br>        sh <span class="hljs-string">&quot;cd $it;export ARCH=$&#123;env.ARCH&#125; ;make all&quot;</span><br>    &#125;<br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    sh <span class="hljs-string">&quot;cd $&#123;plugin_name&#125; ;export ARCH=$&#123;env.ARCH&#125; ; make all&quot;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="判断parameters中的参数是否存在"><a href="#判断parameters中的参数是否存在" class="headerlink" title="判断parameters中的参数是否存在"></a>判断parameters中的参数是否存在</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-keyword">if</span> (params.ParentJobName) &#123;<br>    echo <span class="hljs-string">&quot;job trigger from upstream $&#123;params.ParentJobName&#125;&quot;</span><br>    env.parentdir = <span class="hljs-string">&quot;../$&#123;params.ParentJobName&#125;/&quot;</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    echo <span class="hljs-string">&quot;no upstream job &quot;</span><br>    env.parentdir = <span class="hljs-string">&quot;&quot;</span><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>pipeline-最佳实践-8-parameters详解</title>
    <link href="/2023/03/23/pipeline-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-8-parameters%E8%AF%A6%E8%A7%A3/"/>
    <url>/2023/03/23/pipeline-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-8-parameters%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>parameters 提供用户在触发pipeline时应提供的参数列表。这些用户指定的参数的值可以通过 params 对象提供给pipeline步骤.</p><p>每个参数都有一个 Name 和 Value，具体取决于参数类型。此信息在生成开始时作为环境变量导出，从而允许生成配置的后续部分访问这些值。例如，可以使用{ PARAMETER <em>NAME }语法(或 Windows 上的% PARAMETER</em> NAME%)执行此操作。</p><h2 id="可用类型"><a href="#可用类型" class="headerlink" title="可用类型"></a>可用类型</h2><p>string 字符串类型<br>text 多行文本类型，换行使用\n<br>booleanParam 布尔类型<br>choice，选择参数类型，使用\n来分隔多个选项<br>password 密码类型</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs groovy">pipeline &#123;<br>    agent any<br>    parameters &#123;<br>        string(<span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;PERSON&#x27;</span>, <span class="hljs-attr">defaultValue:</span> <span class="hljs-string">&#x27;Mr Jenkins&#x27;</span>, <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;Who should I say hello to?&#x27;</span>)<br><br>        text(<span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;BIOGRAPHY&#x27;</span>, <span class="hljs-attr">defaultValue:</span> <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;Enter some information about the person&#x27;</span>)<br><br>        booleanParam(<span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;TOGGLE&#x27;</span>, <span class="hljs-attr">defaultValue:</span> <span class="hljs-literal">true</span>, <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;Toggle this value&#x27;</span>)<br><br>        choice(<span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;CHOICE&#x27;</span>, <span class="hljs-attr">choices:</span> [<span class="hljs-string">&#x27;One&#x27;</span>, <span class="hljs-string">&#x27;Two&#x27;</span>, <span class="hljs-string">&#x27;Three&#x27;</span>], <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;Pick something&#x27;</span>)<br><br>        password(<span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;PASSWORD&#x27;</span>, <span class="hljs-attr">defaultValue:</span> <span class="hljs-string">&#x27;SECRET&#x27;</span>, <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;Enter a password&#x27;</span>)<br>    &#125;<br>    stages &#123;<br>        stage(<span class="hljs-string">&#x27;Example&#x27;</span>) &#123;<br>            steps &#123;<br>                echo <span class="hljs-string">&quot;Hello $&#123;params.PERSON&#125;&quot;</span><br><br>                echo <span class="hljs-string">&quot;Biography: $&#123;params.BIOGRAPHY&#125;&quot;</span><br><br>                echo <span class="hljs-string">&quot;Toggle: $&#123;params.TOGGLE&#125;&quot;</span><br><br>                echo <span class="hljs-string">&quot;Choice: $&#123;params.CHOICE&#125;&quot;</span><br><br>                echo <span class="hljs-string">&quot;Password: $&#123;params.PASSWORD&#125;&quot;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>pipeline-最佳实践-6-如何循环</title>
    <link href="/2023/03/21/pipeline-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-6-%E5%A6%82%E4%BD%95%E5%BE%AA%E7%8E%AF/"/>
    <url>/2023/03/21/pipeline-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-6-%E5%A6%82%E4%BD%95%E5%BE%AA%E7%8E%AF/</url>
    
    <content type="html"><![CDATA[<p>pipeline中 使用 each 方法来遍历 列表，列表中元素 用 it 来代替。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">// 列表</span><br>example_list = [ <span class="hljs-string">&#x27;golang&#x27;</span>, <span class="hljs-string">&#x27;shell&#x27;</span>, <span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-string">&#x27;java&#x27;</span> ]<br><br>pipeline &#123;<br>    agent any<br>    <br>    options &#123;<br>        ansiColor(<span class="hljs-string">&#x27;xterm&#x27;</span>)<br>    &#125;<br>    <br>    <span class="hljs-comment">// 中间代码省略。</span><br>    stages &#123;<br>        stage(<span class="hljs-string">&#x27;3.构建&#x27;</span>)&#123;<br>            environment &#123;<br>                MACHIME = <span class="hljs-string">&quot;$arch&quot;</span><br>            &#125;<br><br>            steps &#123;<br>                script &#123;<br>                    <span class="hljs-keyword">if</span> ( params.middle_name == <span class="hljs-string">&quot;all&quot;</span> ) &#123;<br>                        echo <span class="hljs-string">&quot;产出全部制品&quot;</span><br>                        example_list.each() &#123;  <span class="hljs-comment">// 开始循环</span><br>                            echo it <span class="hljs-comment">// it 代表循环中的元素。</span><br>                            sh <span class="hljs-string">&quot;bash example.sh $&#123;it&#125;&quot;</span><br>                        &#125;<br><br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        sh <span class="hljs-string">&quot;呵呵哒&quot;</span><br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>jenkins</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jenkins</tag>
      
      <tag>pipeline</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pipeline-最佳实践-4-parallel-pending问题</title>
    <link href="/2023/03/21/pipeline-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-4-parallel-pending%E9%97%AE%E9%A2%98/"/>
    <url>/2023/03/21/pipeline-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-4-parallel-pending%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>在pipeline类型的job 中启用 parallel 后发现,会有并行的job 出现 pending 等待问题. 实际上 并行 效果没有体现出来.<br>查看 等待状态的job 有提示 : Waiting for next available executor</p><p>解决方法:</p><p>调整 可执行器的 可用数量 , 默认master的 可执行器 数量 为 2 . 一旦发起并行, executor 不够用.</p><p>Dashboard -&gt; 系统管理 -&gt; 节点列表 -&gt; master<br>ConfigureNumber of executors -&gt; 4 ,改为 4 .</p><p>同时在 master 处 发现 警告提示 : 剩余交换空间 不足 0 .</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /data/jenkins_2_375_3/swap<br><span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/zero of=/data/jenkins_2_375_3/swap/swapfile bs=1024M count=4<br>mkswap /data/jenkins_2_375_3/swap/swapfile<br>swapon /data/jenkins_2_375_3/swap/swapfile<br>free -g<br>              total        used        free      shared  buff/cache   available<br>Mem:             63           9          10           0          43          44<br>Swap:             3           0           3<br><br></code></pre></td></tr></table></figure><p>重启 jenkins后, 剩余交换空间 提示 消失.</p><p>这时 再次 执行 之前的 parallel 的 job ,发现 可以 并行 执行 4 个 了 .</p><p>在 job 左下角 构建执行状态 有 4 个 进度条. 到此 OK.</p>]]></content>
    
    
    <categories>
      
      <category>jenkins</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jenkins</tag>
      
      <tag>pipeline</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pipeline-最佳实践-5 只保留最近的job</title>
    <link href="/2023/03/16/pipeline-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-5-%E5%8F%AA%E4%BF%9D%E7%95%99%E6%9C%80%E8%BF%91%E7%9A%84job/"/>
    <url>/2023/03/16/pipeline-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-5-%E5%8F%AA%E4%BF%9D%E7%95%99%E6%9C%80%E8%BF%91%E7%9A%84job/</url>
    
    <content type="html"><![CDATA[<h2 id="删除job-只保留最近10次"><a href="#删除job-只保留最近10次" class="headerlink" title="删除job,只保留最近10次"></a>删除job,只保留最近10次</h2><p>Dashboard -&gt; 系统管理 -&gt; Script Console ,粘贴下面 groovy 脚本,执行.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">// Inspired by https://wiki.jenkins.io/display/JENKINS/Manually+run+log+rotation+on+all+jobs</span><br><span class="hljs-comment">// Check out these files for more info on LogRotator and WorkflowJob</span><br><span class="hljs-comment">// https://github.com/jenkinsci/jenkins/blob/master/core/src/main/java/hudson/tasks/LogRotator.java</span><br><span class="hljs-comment">// https://github.com/jenkinsci/workflow-job-plugin/blob/master/src/main/java/org/jenkinsci/plugins/workflow/job/WorkflowJob.java</span><br><span class="hljs-keyword">import</span> hudson.tasks.*;<br><span class="hljs-keyword">import</span> org.jenkinsci.plugins.workflow.job.*;<br><br><span class="hljs-keyword">def</span> jobs = Jenkins.instance.getAllItems(WorkflowJob.<span class="hljs-keyword">class</span>);<br><span class="hljs-keyword">def</span> numJobsToKeep = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">def</span> rotator = <span class="hljs-keyword">new</span> LogRotator(<span class="hljs-number">-1</span>, numJobsToKeep);<br><br><span class="hljs-keyword">def</span> startTime = System.currentTimeMillis();<br><br><span class="hljs-keyword">for</span> (WorkflowJob <span class="hljs-attr">job :</span> jobs) &#123;<br>    <span class="hljs-keyword">if</span> (System.currentTimeMillis() - startTime &gt; <span class="hljs-number">20000</span>) &#123;<br>        <span class="hljs-comment">// Bail out if it takes too long, just run the script again until it feels &quot;instant&quot;</span><br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    rotator.perform(job);<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>jenkins</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jenkins</tag>
      
      <tag>pipeline</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pipeline 最佳实践-3 parallel使用</title>
    <link href="/2023/03/16/pipeline-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-3-parallel%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/03/16/pipeline-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-3-parallel%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>parallel 节内的 多个 stage 可以同时 并行执行。<br>failFast true ；此选项开启：有stage报错，就强制停止当前job</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs groovy">pipeline &#123;<br>    agent any <br><br>    stages &#123;<br>        stage(<span class="hljs-string">&#x27;Build&#x27;</span>) &#123;<br>            failFast <span class="hljs-literal">true</span> <span class="hljs-comment">// 有stage报错，就强制停止当前job</span><br>            parallel&#123;<br>                stage(<span class="hljs-string">&#x27;Build:Module1&#x27;</span>) &#123; <br>                    steps &#123; <br>                        sh <span class="hljs-string">&#x27;echo Build Module1 stage ...&#x27;</span> <br>                    &#125;<br>                &#125;<br>                stage(<span class="hljs-string">&#x27;Build:Module2&#x27;</span>) &#123; <br>                    steps &#123; <br>                        sh <span class="hljs-string">&#x27;echo Build Module2 stage ...&#x27;</span> <br>                    &#125;<br>                &#125;<br>                stage(<span class="hljs-string">&#x27;Build:Module3&#x27;</span>) &#123; <br>                    steps &#123; <br>                        sh <span class="hljs-string">&#x27;echo Build Module3 stage ...&#x27;</span> <br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        stage(<span class="hljs-string">&#x27;Test&#x27;</span>)&#123;<br>            steps &#123;<br>                sh <span class="hljs-string">&#x27;echo Test stage ...&#x27;</span> <br>            &#125;<br>        &#125;<br>        stage(<span class="hljs-string">&#x27;Deploy&#x27;</span>) &#123;<br>            steps &#123;<br>                sh <span class="hljs-string">&#x27;echo Deploy stage ...&#x27;</span> <br>            &#125;<br>        &#125;<br>    &#125;<br>  &#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>jenkins</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jenkins</tag>
      
      <tag>pipeline</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pipeline中docker使用</title>
    <link href="/2023/03/16/pipeline-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-2-docker%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/03/16/pipeline-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-2-docker%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>pipeline中的agent节,可以使用docker,可以借用到docker的一些前沿特性.实现一些功能的即插即用.<br>前提: 在jenkins所在主机上要安装好docker服务.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># hello_world2.go 栗子</span><br><span class="hljs-built_in">cat</span> hello_world2.go<br>package main<br><br>import <span class="hljs-string">&quot;fmt&quot;</span><br><br>const (<br> a = iota // a = 0<br> b        // b = 1<br> c        // c = 2<br> d = 5    // d = 5<br> e        // e = 5<br>)<br><br>func <span class="hljs-function"><span class="hljs-title">main</span></span>() &#123;<br> fmt.Printf(<span class="hljs-string">&quot;Καλημέρα κόσμε; or こんにちは 世界\n&quot;</span>)<br> fmt.Println(<span class="hljs-string">&quot;a: &quot;</span>, a)<br> fmt.Println(<span class="hljs-string">&quot;b: &quot;</span>, b)<br> fmt.Println(<span class="hljs-string">&quot;c: &quot;</span>, c)<br> fmt.Println(<span class="hljs-string">&quot;d: &quot;</span>, d)<br> fmt.Println(<span class="hljs-string">&quot;e: &quot;</span>, e)<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><br><span class="hljs-keyword">def</span> JOB_NAME = <span class="hljs-string">&quot;$&#123;env.JOB_NAME&#125;&quot;</span><br><span class="hljs-keyword">def</span> BUILD_NUMBER = <span class="hljs-string">&quot;$&#123;env.BUILD_NUMBER&#125;&quot;</span><br><br><br>pipeline &#123;<br>    <span class="hljs-comment">// agent any</span><br>    agent &#123;<br>        docker &#123;<br>            <span class="hljs-comment">// image &#x27;node:7-alpine&#x27; 麒麟arm64机器,报错,原因这个老镜像.木有arm64的镜像.</span><br>            <span class="hljs-comment">// image &#x27;golang:alpine3.16&#x27;</span><br>            image <span class="hljs-string">&#x27;golang:1.20.1-alpine3.17&#x27;</span><br>            <span class="hljs-comment">// args &#x27;--platform linux/arm64 -it --entrypoint=/bin/bash&#x27;</span><br>            args <span class="hljs-string">&quot;-v /data/example:/tmp --platform linux/$&#123;params.arch&#125;&quot;</span><br>        &#125;<br>    &#125;<br><br><br>    parameters &#123;<br><br>        choice (<span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;arch&#x27;</span>, <span class="hljs-attr">choices:</span> [<span class="hljs-string">&#x27;arm64&#x27;</span>, <span class="hljs-string">&#x27;amd64&#x27;</span>], <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;选择CPU架构&#x27;</span>)<br>        choice (<span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;ostype&#x27;</span>, <span class="hljs-attr">choices:</span> [<span class="hljs-string">&#x27;ky10&#x27;</span>, <span class="hljs-string">&#x27;nfs4&#x27;</span>], <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;服务器操作系统类型，ky10、nfs4&#x27;</span>)<br><br>    &#125;<br><br>    stages &#123;<br>        stage(<span class="hljs-string">&#x27;1、拉取代码&#x27;</span>)&#123;<br>            <span class="hljs-comment">// agent &#123;</span><br>            <span class="hljs-comment">//     docker &#123;</span><br>            <span class="hljs-comment">//     // image &#x27;node:7-alpine&#x27; 麒麟arm64机器,报错,原因这个老镜像.木有arm64的镜像.</span><br>            <span class="hljs-comment">//     // image &#x27;golang:alpine3.16&#x27;</span><br>            <span class="hljs-comment">//     image &#x27;golang:1.20.1-alpine3.17&#x27;</span><br>            <span class="hljs-comment">//     // args &#x27;--platform linux/arm64 -it --entrypoint=/bin/bash&#x27;</span><br>            <span class="hljs-comment">//     args &#x27;-v /data/example:/tmp --platform linux/amd64&#x27;</span><br>            <span class="hljs-comment">//     &#125;</span><br>            <span class="hljs-comment">// &#125;</span><br>            steps &#123;<br>                    sh <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">                    echo arch:`uname -m`</span><br><span class="hljs-string">                    rm -f go.mod</span><br><span class="hljs-string">                    /usr/local/go/bin/go env -w GO111MODULE=on </span><br><span class="hljs-string">                    /usr/local/go/bin/go mod init heheda</span><br><span class="hljs-string">                    go version </span><br><span class="hljs-string">                    cp -rf /tmp/hello_world2.go ./ </span><br><span class="hljs-string">                    ls ./ -al </span><br><span class="hljs-string">                    pwd </span><br><span class="hljs-string">                    env GOARCH=&quot;$&#123;params.arch&#125;&quot; /usr/local/go/bin/go build -o hello</span><br><span class="hljs-string">                    ls -al ./</span><br><span class="hljs-string">                    ./hello</span><br><span class="hljs-string">                    &quot;&quot;&quot;</span><br>            &#125;<br>        &#125;<br><br><br>        stage(<span class="hljs-string">&#x27;2、构建插件&#x27;</span>) &#123;<br>            <span class="hljs-comment">// agent none</span><br>            steps &#123;<br>                echo <span class="hljs-string">&quot;开始进行构建&quot;</span><br>                script &#123;<br>                    sh <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">                    go version</span><br><span class="hljs-string">                    &#x27;&#x27;&#x27;</span><br>                &#125;<br>                <br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>jenkins</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pipeline 最佳实践-1</title>
    <link href="/2023/03/15/pipeline-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-1/"/>
    <url>/2023/03/15/pipeline-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-1/</url>
    
    <content type="html"><![CDATA[<h2 id="修改jenkins-工作主目录"><a href="#修改jenkins-工作主目录" class="headerlink" title="修改jenkins 工作主目录"></a>修改jenkins 工作主目录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">启动jenkins:<br><span class="hljs-built_in">nohup</span> java -jar /Applications/Jenkins/jenkins.war --httpPort=8888 &amp;<br>默认会在用户家目录下.jenkins 释放所需的文件,即为JENKINS_HOME.<br>在jar启动前修改JENKINS_HOME即可达到修改jenkins主目录的目的<br>vim /etc/profile<br><span class="hljs-built_in">export</span> JENKINS_HOME=<span class="hljs-string">&#x27;/Volumes/Mac-Tools/jenkins&#x27;</span><br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><p>如果使用systemd纳管,可在 EnvironmentFile 中 定义 JENKINS_HOME</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">cat</span> jenkins.service <br><span class="hljs-comment"># /usr/lib/systemd/system/jenkins.service</span><br>[Unit]<br>Description=Jenkins<br>After=network.target<br><br>[Service]<br>Type=simple<br>EnvironmentFile=/etc/sysconfig/jenkins<br>ExecStart=/usr/local/jdk-17.0.2/bin/java <span class="hljs-variable">$JAVA_OPTS</span>  -jar <span class="hljs-variable">$JENKINS_WAR</span> <span class="hljs-variable">$JENKINS_ARGS</span><br>Restart=always<br>RestartSec=10<br><br>[Install]<br>WantedBy=multi-user.target<br><br><span class="hljs-comment"># jenkins环境变量文件</span><br><span class="hljs-built_in">cat</span> /etc/sysconfig/jenkins<br>JENKINS_WAR=/data/jenkins_2_375_3/jenkins.war<br><br>JENKINS_HOME=/data/jenkins_2_375_3/home<br><br>JAVA_OPTS=-Djava.awt.headless=<span class="hljs-literal">true</span> -XX:+UseStringDeduplication<br>JENKINS_ARGS=<span class="hljs-string">&quot;--httpPort=18080 \</span><br><span class="hljs-string">  --logfile=/data/jenkins_2_375_3/logs/jenkins.log \</span><br><span class="hljs-string">  --javaHome=/usr/local/jdk-17.0.2&quot;</span><br><br></code></pre></td></tr></table></figure><p>已经有job在旧的 ~&#x2F;.jenkins 中工作的话,需要将jenkins 停掉, 然后 mv 到 新定义的 目录中.再启动jenkins即可.</p>]]></content>
    
    
    <categories>
      
      <category>jenkins</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jenkins</tag>
      
      <tag>pipeline</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jenkins job 使用jenkinsfile</title>
    <link href="/2023/03/15/jenkins-job-%E4%BD%BF%E7%94%A8jenkinsfile/"/>
    <url>/2023/03/15/jenkins-job-%E4%BD%BF%E7%94%A8jenkinsfile/</url>
    
    <content type="html"><![CDATA[<p>创建pipeline 类型的job时候,有2种选择方式:</p><p>流水线 -&gt; 定义 -&gt;</p><h2 id="pipeline-script"><a href="#pipeline-script" class="headerlink" title="pipeline script"></a>pipeline script</h2><p>可以将pipeline的groovy 脚本 直接 贴到 scripts 框中.<br>多用在初期job调试过程中.</p><h2 id="pipeline-script-from-scm"><a href="#pipeline-script-from-scm" class="headerlink" title="pipeline script from scm"></a>pipeline script from scm</h2><p>在SCM中选择 git 类型 -&gt; Repository URL -&gt; Credentials -&gt; 分支 -&gt; 脚本路径: pipeline-jenkins&#x2F;middleware-build.groovy<br>可以用在生产实践中,通过jenkinsfile来实现pipeline,可以将jenkinsfile 放到工程仓库实现版本管理.得以管理整个项目的生命周期.<br>实践证明,每次对 jenkinsfile 改动 都可以 通过 SCM 获取到,直接反馈到具体的job构建过程中.</p>]]></content>
    
    
    <categories>
      
      <category>jenkins</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jenkins</tag>
      
      <tag>pipeline</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jenkins-流水线语法</title>
    <link href="/2023/03/14/jenkins-%E6%B5%81%E6%B0%B4%E7%BA%BF%E8%AF%AD%E6%B3%95/"/>
    <url>/2023/03/14/jenkins-%E6%B5%81%E6%B0%B4%E7%BA%BF%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="流水线语法"><a href="#流水线语法" class="headerlink" title="流水线语法"></a>流水线语法</h1><ul><li>本文节选自 jenkins.io</li><li><a href="https://www.jenkins.io/zh/doc/book/pipeline/syntax/#%E5%8F%82%E6%95%B0">https://www.jenkins.io/zh/doc/book/pipeline/syntax/#%E5%8F%82%E6%95%B0</a></li></ul><p>本节是建立在 流水线入门内容的基础上，而且，应当被当作一个参考。 对于在实际示例中如何使用流水线语法的更多信息, 请参阅本章在流水线插件的2.5版本中的 使用 Jenkinsfile部分, 流水线支持两种离散的语法，具体如下对于每种的优缺点, 参见语法比较。</p><p>正如 本章开始讨论的, 流水线最基础的部分是 “步骤”。基本上, 步骤告诉 Jenkins 要做什么，以及作为声明式和脚本化流水线语法的基本构建块。</p><p>对于可用步骤的概述, 请参考 流水线步骤引用，它包含了一个构建到流水线的步骤和 插件提供的步骤的全面的列表。</p><p>声明式流水线<br>声明式流水线是最近添加到 Jenkins 流水线的 ，它在流水线子系统之上提供了一种更简单，更有主见的语法。</p><p>所有有效的声明式流水线必须包含在一个 pipeline 块中, 比如:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs groovy">pipeline &#123;<br>    <span class="hljs-comment">/*insert Declarative Pipeline here*/</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在声明式流水线中有效的基本语句和表达式遵循与 Groovy的语法同样的规则， 有以下例外:</p><p>流水线顶层必须是一个 block, 特别地: pipeline { }</p><p>没有分号作为语句分隔符，，每条语句都必须在自己的行上。</p><p>块只能由 节段, 指令, 步骤, 或赋值语句组成。 *属性引用语句被视为无参方法调用。 例如, input被视为 input()</p><h2 id="节段"><a href="#节段" class="headerlink" title="节段"></a>节段</h2><p>声明式流水线中的节段通常包含一个或多个 指令 或 步骤。</p><h3 id="agent"><a href="#agent" class="headerlink" title="agent"></a>agent</h3><p>agent 部分指定了整个流水线或特定的部分, 将会在Jenkins环境中执行的位置，这取决于 agent 区域的位置。该部分必须在 pipeline 块的顶层被定义, 但是 stage 级别的使用是可选的。</p><p>Required Yes</p><p>参数<br>为了支持作者可能有的各种各样的用例流水线, agent 部分支持一些不同类型的参数。这些参数应用在<code>pipeline</code>块的顶层, 或 stage 指令内部。</p><p>any<br>在任何可用的代理上执行流水线或阶段。<br>例如: agent any</p><p>none<br>当在 pipeline 块的顶部没有全局代理， 该参数将会被分配到整个流水线的运行中并且每个 stage 部分都需要包含他自己的 agent 部分。<br>比如: agent none</p><p>label<br>在提供了标签的 Jenkins 环境中可用的代理上执行流水线或阶段。<br>例如: agent { label ‘my-defined-label’ }</p><p>node<br>agent { node { label ‘labelName’ } } 和 agent { label ‘labelName’ } 一样, 但是 node 允许额外的选项 (比如 customWorkspace )。</p><p>docker<br>使用给定的容器执行流水线或阶段。该容器将在预置的 node上，或在匹配可选定义的<code>label</code> 参数上，动态的供应来接受基于Docker的流水线。 docker 也可以选择的接受 args 参数，该参数可能包含直接传递到 docker run 调用的参数, 以及 alwaysPull 选项, 该选项强制 docker pull ，即使镜像名称已经存在。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs groovy">比如: <br>agent &#123; docker <span class="hljs-string">&#x27;maven:3-alpine&#x27;</span> &#125; <br><br>或<br><br>agent &#123;<br>    docker &#123;<br>        image <span class="hljs-string">&#x27;maven:3-alpine&#x27;</span><br>        label <span class="hljs-string">&#x27;my-defined-label&#x27;</span><br>        args  <span class="hljs-string">&#x27;-v /tmp:/tmp&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>dockerfile<br>执行流水线或阶段, 使用从源代码库包含的 Dockerfile 构建的容器。为了使用该选项， Jenkinsfile 必须从多个分支流水线中加载, 或者加载 “Pipeline from SCM.” 通常，这是源代码仓库的根目录下的 Dockerfile : agent { dockerfile true }. 如果在另一个目录下构建 Dockerfile , 使用 dir 选项: agent { dockerfile {dir ‘someSubDir’ } }。如果 Dockerfile 有另一个名称, 你可以使用 filename 选项指定该文件名。你可以传递额外的参数到 docker build … 使用 additionalBuildArgs 选项提交, 比如 agent { dockerfile {additionalBuildArgs ‘–build-arg foo&#x3D;bar’ } }。 例如, 一个带有 build&#x2F;Dockerfile.build 的仓库,期望一个构建参数 version:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs groovy">agent &#123;<br>    <span class="hljs-comment">// Equivalent to &quot;docker build -f Dockerfile.build --build-arg version=1.0.2 ./build/</span><br>    dockerfile &#123;<br>        filename <span class="hljs-string">&#x27;Dockerfile.build&#x27;</span><br>        dir <span class="hljs-string">&#x27;build&#x27;</span><br>        label <span class="hljs-string">&#x27;my-defined-label&#x27;</span><br>        additionalBuildArgs  <span class="hljs-string">&#x27;--build-arg version=1.0.2&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>常见选项<br>有一些应用于两个或更多 agent 的实现的选项。他们不被要求，除非特别规定。</p><p>label<br>一个字符串。该标签用于运行流水线或个别的 stage。</p><p>该选项对 node, docker 和 dockerfile 可用, <code>node</code>要求必须选择该选项。</p><p>customWorkspace<br>一个字符串。在自定义工作区运行应用了 agent 的流水线或个别的 stage, 而不是默认值。 它既可以是一个相对路径, 在这种情况下，自定义工作区会存在于节点工作区根目录下, 或者一个绝对路径。比如:</p><p>agent {<br>    node {<br>        label ‘my-defined-label’<br>        customWorkspace ‘&#x2F;some&#x2F;other&#x2F;path’<br>    }<br>}<br>该选项对 node, docker 和 dockerfile 有用 。</p><p>reuseNode<br>一个布尔值, 默认为false。 如果是true, 则在流水线的顶层指定的节点上运行该容器, 在同样的工作区, 而不是在一个全新的节点上。</p><p>这个选项对 docker 和 dockerfile 有用, 并且只有当 使用在个别的 stage 的 agent 上才会有效。</p><p>示例<br>Jenkinsfile (Declarative Pipeline)</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs groovy">pipeline &#123;<br>    agent &#123; docker <span class="hljs-string">&#x27;maven:3-alpine&#x27;</span> &#125;<br>    stages &#123;<br>        stage(<span class="hljs-string">&#x27;Example Build&#x27;</span>) &#123;<br>            steps &#123;<br>                sh <span class="hljs-string">&#x27;mvn -B clean verify&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在一个给定名称和标签(maven:3-alpine)的新建的容器上执行定义在流水线中的所有步骤 。<br>阶段级别的 agent 部分<br>Jenkinsfile (Declarative Pipeline)</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs groovy">pipeline &#123;<br>    agent none<br>    stages &#123;<br>        stage(<span class="hljs-string">&#x27;Example Build&#x27;</span>) &#123;<br>            agent &#123; docker <span class="hljs-string">&#x27;maven:3-alpine&#x27;</span> &#125;<br>            steps &#123;<br>                echo <span class="hljs-string">&#x27;Hello, Maven&#x27;</span><br>                sh <span class="hljs-string">&#x27;mvn --version&#x27;</span><br>            &#125;<br>        &#125;<br>        stage(<span class="hljs-string">&#x27;Example Test&#x27;</span>) &#123;<br>            agent &#123; docker <span class="hljs-string">&#x27;openjdk:8-jre&#x27;</span> &#125;<br>            steps &#123;<br>                echo <span class="hljs-string">&#x27;Hello, JDK&#x27;</span><br>                sh <span class="hljs-string">&#x27;java -version&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在流水线顶层定义 agent none 确保 an Executor 没有被分配。 使用 agent none 也会强制 stage 部分包含他自己的 agent 部分。<br>使用镜像在一个新建的容器中执行该阶段的该步骤。<br>使用一个与之前阶段不同的镜像在一个新建的容器中执行该阶段的该步骤。</p><h3 id="post"><a href="#post" class="headerlink" title="post"></a>post</h3><p>post 部分定义一个或多个steps ，这些阶段根据流水线或阶段的完成情况而 运行(取决于流水线中 post 部分的位置). post 支持以下 post-condition 块中的其中之一: always, changed, failure, success, unstable, 和 aborted。这些条件块允许在 post 部分的步骤的执行取决于流水线或阶段的完成状态。</p><p>Conditions<br>always<br>无论流水线或阶段的完成状态如何，都允许在 post 部分运行该步骤。</p><p>changed<br>只有当前流水线或阶段的完成状态与它之前的运行不同时，才允许在 post 部分运行该步骤。</p><p>failure<br>只有当前流水线或阶段的完成状态为”failure”，才允许在 post 部分运行该步骤, 通常web UI是红色。</p><p>success<br>只有当前流水线或阶段的完成状态为”success”，才允许在 post 部分运行该步骤, 通常web UI是蓝色或绿色。</p><p>unstable<br>只有当前流水线或阶段的完成状态为”unstable”，才允许在 post 部分运行该步骤, 通常由于测试失败,代码违规等造成。通常web UI是黄色。</p><p>aborted<br>只有当前流水线或阶段的完成状态为”aborted”，才允许在 post 部分运行该步骤, 通常由于流水线被手动的aborted。通常web UI是灰色。</p><p>示例<br>Jenkinsfile (Declarative Pipeline)</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs groovy">pipeline &#123;<br>    agent any<br>    stages &#123;<br>        stage(<span class="hljs-string">&#x27;Example&#x27;</span>) &#123;<br>            steps &#123;<br>                echo <span class="hljs-string">&#x27;Hello World&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    post &#123;<br>        always &#123;<br>            echo <span class="hljs-string">&#x27;I will always say Hello again!&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>按照惯例, post 部分应该放在流水线的底部。<br>Post-condition 块包含与 steps 部分相同的steps。</p><h3 id="stages"><a href="#stages" class="headerlink" title="stages"></a>stages</h3><p>包含一系列一个或多个 stage 指令, stages 部分是流水线描述的大部分”work” 的位置。 建议 stages 至少包含一个 stage 指令用于连续交付过程的每个离散部分,比如构建, 测试, 和部署。</p><p>Required Yes</p><p>示例<br>Jenkinsfile (Declarative Pipeline)</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs groovy">pipeline &#123;<br>    agent any<br>    stages &#123;<br>        stage(<span class="hljs-string">&#x27;Example&#x27;</span>) &#123;<br>            steps &#123;<br>                echo <span class="hljs-string">&#x27;Hello World&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>stages 部分通常会遵循诸如 agent, options 等的指令。</p><h3 id="steps"><a href="#steps" class="headerlink" title="steps"></a>steps</h3><p>steps 部分在给定的 stage 指令中执行的定义了一系列的一个或多个steps。</p><p>Required Yes</p><p>示例<br>Jenkinsfile (Declarative Pipeline)</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><br>pipeline &#123;<br>    agent any<br>    stages &#123;<br>        stage(<span class="hljs-string">&#x27;Example&#x27;</span>) &#123;<br>            steps &#123;<br>                echo <span class="hljs-string">&#x27;Hello World&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>steps 部分必须包含一个或多个步骤。</p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="environment"><a href="#environment" class="headerlink" title="environment"></a>environment</h3><p>environment 指令制定一个 键-值对序列，该序列将被定义为所有步骤的环境变量，或者是特定于阶段的步骤， 这取决于 environment 指令在流水线内的位置。</p><p>该指令支持一个特殊的助手方法 credentials() ，该方法可用于在Jenkins环境中通过标识符访问预定义的凭证。对于类型为 “Secret Text”的凭证, credentials() 将确保指定的环境变量包含秘密文本内容。对于类型为 “SStandard username and password”的凭证, 指定的环境变量指定为 username:password ，并且两个额外的环境变量将被自动定义 :分别为 MYVARNAME_USR 和 MYVARNAME_PSW 。</p><p>示例<br>Jenkinsfile (Declarative Pipeline)</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs groovy">pipeline &#123;<br>    agent any<br>    environment &#123;<br>        CC = <span class="hljs-string">&#x27;clang&#x27;</span><br>    &#125;<br>    stages &#123;<br>        stage(<span class="hljs-string">&#x27;Example&#x27;</span>) &#123;<br>            environment &#123;<br>                AN_ACCESS_KEY = credentials(<span class="hljs-string">&#x27;my-prefined-secret-text&#x27;</span>)<br>            &#125;<br>            steps &#123;<br>                sh <span class="hljs-string">&#x27;printenv&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>顶层流水线块中使用的 environment 指令将适用于流水线中的所有步骤。<br>在一个 stage 中定义的 environment 指令只会将给定的环境变量应用于 stage 中的步骤。<br>environment 块有一个 助手方法 credentials() 定义，该方法可以在 Jenkins 环境中用于通过标识符访问预定义的凭证。</p><h3 id="options"><a href="#options" class="headerlink" title="options"></a>options</h3><p>options 指令允许从流水线内部配置特定于流水线的选项。 流水线提供了许多这样的选项, 比如 buildDiscarder,但也可以由插件提供, 比如 timestamps.</p><p>可用选项<br>buildDiscarder<br>为最近的流水线运行的特定数量保存组件和控制台输出。例如: options { buildDiscarder(logRotator(numToKeepStr: ‘1’)) }</p><p>disableConcurrentBuilds<br>不允许同时执行流水线。 可被用来防止同时访问共享资源等。 例如: options { disableConcurrentBuilds() }</p><p>overrideIndexTriggers<br>允许覆盖分支索引触发器的默认处理。 如果分支索引触发器在多分支或组织标签中禁用, options { overrideIndexTriggers(true) } 将只允许它们用于促工作。否则, options { overrideIndexTriggers(false) } 只会禁用改作业的分支索引触发器。</p><p>skipDefaultCheckout<br>在<code>agent</code> 指令中，跳过从源代码控制中检出代码的默认情况。例如: options { skipDefaultCheckout() }</p><p>skipStagesAfterUnstable<br>一旦构建状态变得UNSTABLE，跳过该阶段。例如: options { skipStagesAfterUnstable() }</p><p>checkoutToSubdirectory<br>在工作空间的子目录中自动地执行源代码控制检出。例如: options { checkoutToSubdirectory(‘foo’) }</p><p>timeout<br>设置流水线运行的超时时间, 在此之后，Jenkins将中止流水线。例如: options { timeout(time: 1, unit: ‘HOURS’) }</p><p>retry<br>在失败时, 重新尝试整个流水线的指定次数。 For example: options { retry(3) }</p><p>timestamps<br>预谋所有由流水线生成的控制台输出，与该流水线发出的时间一致。 例如: options { timestamps() }</p><p>Example<br>Jenkinsfile (Declarative Pipeline)</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs groovy">pipeline &#123;<br>    agent any<br>    options &#123;<br>        timeout(<span class="hljs-attr">time:</span> <span class="hljs-number">1</span>, <span class="hljs-attr">unit:</span> <span class="hljs-string">&#x27;HOURS&#x27;</span>)<br>    &#125;<br>    stages &#123;<br>        stage(<span class="hljs-string">&#x27;Example&#x27;</span>) &#123;<br>            steps &#123;<br>                echo <span class="hljs-string">&#x27;Hello World&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>指定一个小时的全局执行超时, 在此之后，Jenkins 将中止流水线运行。</p><h2 id="阶段选项"><a href="#阶段选项" class="headerlink" title="阶段选项"></a>阶段选项</h2><p>stage 的 options 指令类似于流水线根目录上的 options 指令。然而， stage -级别 options 只能包括 retry, timeout, 或 timestamps 等步骤, 或与 stage 相关的声明式选项，如 skipDefaultCheckout。</p><p>在<code>stage</code>, options 指令中的步骤在进入 agent 之前被调用或在 when 条件出现时进行检查。</p><p>可选的阶段选项<br>skipDefaultCheckout<br>在 agent 指令中跳过默认的从源代码控制中检出代码。例如: options { skipDefaultCheckout() }</p><p>timeout<br>设置此阶段的超时时间, 在此之后， Jenkins 会终止该阶段。 例如: options { timeout(time: 1, unit: ‘HOURS’) }</p><p>retry<br>在失败时, 重试此阶段指定次数。 例如: options { retry(3) }</p><p>timestamps<br>预谋此阶段生成的所有控制台输出以及该行发出的时间一致。例如: options { timestamps() }</p><p>示例<br>Jenkinsfile (Declarative Pipeline)</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs groovy">pipeline &#123;<br>    agent any<br>    stages &#123;<br>        stage(<span class="hljs-string">&#x27;Example&#x27;</span>) &#123;<br>            options &#123;<br>                timeout(<span class="hljs-attr">time:</span> <span class="hljs-number">1</span>, <span class="hljs-attr">unit:</span> <span class="hljs-string">&#x27;HOURS&#x27;</span>)<br>            &#125;<br>            steps &#123;<br>                echo <span class="hljs-string">&#x27;Hello World&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>指定 Example 阶段的执行超时时间, 在此之后，Jenkins 将中止流水线运行。</p><h2 id="parameters"><a href="#parameters" class="headerlink" title="parameters"></a>parameters</h2><p>指令提供了一个用户在触发流水线时应该提供的参数列表。这些用户指定参数的值可通过 params 对象提供给流水线步骤, 了解更多请参考示例。</p><p>可用参数<br>string<br>字符串类型的参数, 例如: parameters { string(name: ‘DEPLOY_ENV’, defaultValue: ‘staging’, description: ‘’) }</p><p>booleanParam<br>布尔参数, 例如: parameters { booleanParam(name: ‘DEBUG_BUILD’, defaultValue: true, description: ‘’) }</p><p>示例<br>Jenkinsfile (Declarative Pipeline)</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs groovy">pipeline &#123;<br>    agent any<br>    parameters &#123;<br>        string(<span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;PERSON&#x27;</span>, <span class="hljs-attr">defaultValue:</span> <span class="hljs-string">&#x27;Mr Jenkins&#x27;</span>, <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;Who should I say hello to?&#x27;</span>)<br>    &#125;<br>    stages &#123;<br>        stage(<span class="hljs-string">&#x27;Example&#x27;</span>) &#123;<br>            steps &#123;<br>                echo <span class="hljs-string">&quot;Hello $&#123;params.PERSON&#125;&quot;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="triggers"><a href="#triggers" class="headerlink" title="triggers"></a>triggers</h2><p>指令定义了流水线被重新触发的自动化方法。对于集成了源（ 比如 GitHub 或 BitBucket）的流水线, 可能不需要 triggers ，因为基于 web 的集成很肯能已经存在。 当前可用的触发器是 cron, pollSCM 和 upstream。</p><p>cron<br>接收 cron 样式的字符串来定义要重新触发流水线的常规间隔 ,比如: triggers { cron(‘H <em>&#x2F;4</em> * 1-5’) }</p><p>pollSCM<br>接收 cron 样式的字符串来定义一个固定的间隔，在这个间隔中，Jenkins 会检查新的源代码更新。如果存在更改, 流水线就会被重新触发。例如: triggers { pollSCM(‘H <em>&#x2F;4</em> * 1-5’) }</p><p>upstream<br>接受逗号分隔的工作字符串和阈值。 当字符串中的任何作业以最小阈值结束时，流水线被重新触发。例如: triggers { upstream(upstreamProjects: ‘job1,job2’, threshold: hudson.model.Result.SUCCESS) }</p><p>pollSCM 只在Jenkins 2.22 及以上版本中可用。</p><p>示例<br>Jenkinsfile (Declarative Pipeline)</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs groovy">pipeline &#123;<br>    agent any<br>    triggers &#123;<br>        cron(<span class="hljs-string">&#x27;H */4* * 1-5&#x27;</span>)<br>    &#125;<br>    stages &#123;<br>        stage(<span class="hljs-string">&#x27;Example&#x27;</span>) &#123;<br>            steps &#123;<br>                echo <span class="hljs-string">&#x27;Hello World&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="stage"><a href="#stage" class="headerlink" title="stage"></a>stage</h3><p>stage 指令在 stages 部分进行，应该包含一个 实际上, 流水巷所做的所有实际工作都将封装进一个或多个 stage 指令中。</p><p>示例<br>Jenkinsfile (Declarative Pipeline)</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs groovy">pipeline &#123;<br>    agent any<br>    stages &#123;<br>        stage(<span class="hljs-string">&#x27;Example&#x27;</span>) &#123;<br>            steps &#123;<br>                echo <span class="hljs-string">&#x27;Hello World&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>工具<br>定义自动安装和放置 PATH 的工具的一部分。如果 agent none 指定，则忽略该操作。</p><p>Inside the pipeline block or a stage block.</p><p>支持工具<br>maven<br>jdk<br>gradle<br>示例<br>Jenkinsfile (Declarative Pipeline)</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs groovy">pipeline &#123;<br>    agent any<br>    tools &#123;<br>        maven <span class="hljs-string">&#x27;apache-maven-3.0.1&#x27;</span><br>    &#125;<br>    stages &#123;<br>        stage(<span class="hljs-string">&#x27;Example&#x27;</span>) &#123;<br>            steps &#123;<br>                sh <span class="hljs-string">&#x27;mvn --version&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>The tool name must be pre-configured in Jenkins under Manage Jenkins → Global Tool Configuration.</p><h3 id="input"><a href="#input" class="headerlink" title="input"></a>input</h3><p>stage 的 input 指令允许你使用 input step提示输入。 在应用了 options 后，进入 stage 的 agent 或评估 when 条件前， stage 将暂停。 如果 input 被批准, stage 将会继续。 作为 input 提交的一部分的任何参数都将在环境中用于其他 stage。</p><p>配置项<br>message<br>必需的。 这将在用户提交 input 时呈现给用户。</p><p>id<br>input 的可选标识符， 默认为 stage 名称。</p><p>ok<br><code>input</code>表单上的”ok” 按钮的可选文本。</p><p>submitter<br>可选的以逗号分隔的用户列表或允许提交 input 的外部组名。默认允许任何用户。</p><p>submitterParameter<br>环境变量的可选名称。如果存在，用 submitter 名称设置。</p><p>parameters<br>提示提交者提供的一个可选的参数列表。 更多信息参见 [parameters]。</p><p>示例<br>Jenkinsfile (Declarative Pipeline)</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs groovy">pipeline &#123;<br>    agent any<br>    stages &#123;<br>        stage(<span class="hljs-string">&#x27;Example&#x27;</span>) &#123;<br>            input &#123;<br>                message <span class="hljs-string">&quot;Should we continue?&quot;</span><br>                ok <span class="hljs-string">&quot;Yes, we should.&quot;</span><br>                submitter <span class="hljs-string">&quot;alice,bob&quot;</span><br>                parameters &#123;<br>                    string(<span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;PERSON&#x27;</span>, <span class="hljs-attr">defaultValue:</span> <span class="hljs-string">&#x27;Mr Jenkins&#x27;</span>, <span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;Who should I say hello to?&#x27;</span>)<br>                &#125;<br>            &#125;<br>            steps &#123;<br>                echo <span class="hljs-string">&quot;Hello, $&#123;PERSON&#125;, nice to meet you.&quot;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="when"><a href="#when" class="headerlink" title="when"></a>when</h3><p>when 指令允许流水线根据给定的条件决定是否应该执行阶段。 when 指令必须包含至少一个条件。 如果 when 指令包含多个条件, 所有的子条件必须返回True，阶段才能执行。 这与子条件在 allOf 条件下嵌套的情况相同 (参见下面的示例)。</p><p>使用诸如 not, allOf, 或 anyOf 的嵌套条件可以构建更复杂的条件结构 can be built 嵌套条件可以嵌套到任意深度。</p><p>内置条件<br>branch<br>当正在构建的分支与模式给定的分支匹配时，执行这个阶段, 例如: when { branch ‘master’ }。注意，这只适用于多分支流水线。</p><p>environment<br>当指定的环境变量是给定的值时，执行这个步骤, 例如: when { environment name: ‘DEPLOY_TO’, value: ‘production’ }</p><p>expression<br>当指定的Groovy表达式评估为true时，执行这个阶段, 例如: when { expression { return params.DEBUG_BUILD } }</p><p>not<br>当嵌套条件是错误时，执行这个阶段,必须包含一个条件，例如: when { not { branch ‘master’ } }</p><p>allOf<br>当所有的嵌套条件都正确时，执行这个阶段,必须包含至少一个条件，例如: when { allOf { branch ‘master’; environment name: ‘DEPLOY_TO’, value: ‘production’ } }</p><p>anyOf<br>当至少有一个嵌套条件为真时，执行这个阶段,必须包含至少一个条件，例如: when { anyOf { branch ‘master’; branch ‘staging’ } }</p><p>在进入 stage 的 agent 前评估 when<br>默认情况下, 如果定义了某个阶段的代理，在进入该<code>stage</code> 的 agent 后该 stage 的 when 条件将会被评估。但是, 可以通过在 when 块中指定 beforeAgent 选项来更改此选项。 如果 beforeAgent 被设置为 true, 那么就会首先对 when 条件进行评估 , 并且只有在 when 条件验证为真时才会进入 agent 。</p><p>示例<br>Jenkinsfile (Declarative Pipeline)</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs groovy">pipeline &#123;<br>    agent any<br>    stages &#123;<br>        stage(<span class="hljs-string">&#x27;Example Build&#x27;</span>) &#123;<br>            steps &#123;<br>                echo <span class="hljs-string">&#x27;Hello World&#x27;</span><br>            &#125;<br>        &#125;<br>        stage(<span class="hljs-string">&#x27;Example Deploy&#x27;</span>) &#123;<br>            when &#123;<br>                branch <span class="hljs-string">&#x27;production&#x27;</span><br>            &#125;<br>            steps &#123;<br>                echo <span class="hljs-string">&#x27;Deploying&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Jenkinsfile (Declarative Pipeline)</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs groovy">pipeline &#123;<br>    agent any<br>    stages &#123;<br>        stage(<span class="hljs-string">&#x27;Example Build&#x27;</span>) &#123;<br>            steps &#123;<br>                echo <span class="hljs-string">&#x27;Hello World&#x27;</span><br>            &#125;<br>        &#125;<br>        stage(<span class="hljs-string">&#x27;Example Deploy&#x27;</span>) &#123;<br>            when &#123;<br>                branch <span class="hljs-string">&#x27;production&#x27;</span><br>                environment <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;DEPLOY_TO&#x27;</span>, <span class="hljs-attr">value:</span> <span class="hljs-string">&#x27;production&#x27;</span><br>            &#125;<br>            steps &#123;<br>                echo <span class="hljs-string">&#x27;Deploying&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Jenkinsfile (Declarative Pipeline)</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs groovy">pipeline &#123;<br>    agent any<br>    stages &#123;<br>        stage(<span class="hljs-string">&#x27;Example Build&#x27;</span>) &#123;<br>            steps &#123;<br>                echo <span class="hljs-string">&#x27;Hello World&#x27;</span><br>            &#125;<br>        &#125;<br>        stage(<span class="hljs-string">&#x27;Example Deploy&#x27;</span>) &#123;<br>            when &#123;<br>                allOf &#123;<br>                    branch <span class="hljs-string">&#x27;production&#x27;</span><br>                    environment <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;DEPLOY_TO&#x27;</span>, <span class="hljs-attr">value:</span> <span class="hljs-string">&#x27;production&#x27;</span><br>                &#125;<br>            &#125;<br>            steps &#123;<br>                echo <span class="hljs-string">&#x27;Deploying&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Jenkinsfile (Declarative Pipeline)</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs groovy">pipeline &#123;<br>    agent any<br>    stages &#123;<br>        stage(<span class="hljs-string">&#x27;Example Build&#x27;</span>) &#123;<br>            steps &#123;<br>                echo <span class="hljs-string">&#x27;Hello World&#x27;</span><br>            &#125;<br>        &#125;<br>        stage(<span class="hljs-string">&#x27;Example Deploy&#x27;</span>) &#123;<br>            when &#123;<br>                branch <span class="hljs-string">&#x27;production&#x27;</span><br>                anyOf &#123;<br>                    environment <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;DEPLOY_TO&#x27;</span>, <span class="hljs-attr">value:</span> <span class="hljs-string">&#x27;production&#x27;</span><br>                    environment <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;DEPLOY_TO&#x27;</span>, <span class="hljs-attr">value:</span> <span class="hljs-string">&#x27;staging&#x27;</span><br>                &#125;<br>            &#125;<br>            steps &#123;<br>                echo <span class="hljs-string">&#x27;Deploying&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Jenkinsfile (Declarative Pipeline)</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs groovy">pipeline &#123;<br>    agent any<br>    stages &#123;<br>        stage(<span class="hljs-string">&#x27;Example Build&#x27;</span>) &#123;<br>            steps &#123;<br>                echo <span class="hljs-string">&#x27;Hello World&#x27;</span><br>            &#125;<br>        &#125;<br>        stage(<span class="hljs-string">&#x27;Example Deploy&#x27;</span>) &#123;<br>            when &#123;<br>                expression &#123; BRANCH_NAME ==~ <span class="hljs-regexp">/(production|staging)/</span> &#125;<br>                anyOf &#123;<br>                    environment <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;DEPLOY_TO&#x27;</span>, <span class="hljs-attr">value:</span> <span class="hljs-string">&#x27;production&#x27;</span><br>                    environment <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;DEPLOY_TO&#x27;</span>, <span class="hljs-attr">value:</span> <span class="hljs-string">&#x27;staging&#x27;</span><br>                &#125;<br>            &#125;<br>            steps &#123;<br>                echo <span class="hljs-string">&#x27;Deploying&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Jenkinsfile (Declarative Pipeline)</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs groovy">pipeline &#123;<br>    agent none<br>    stages &#123;<br>        stage(<span class="hljs-string">&#x27;Example Build&#x27;</span>) &#123;<br>            steps &#123;<br>                echo <span class="hljs-string">&#x27;Hello World&#x27;</span><br>            &#125;<br>        &#125;<br>        stage(<span class="hljs-string">&#x27;Example Deploy&#x27;</span>) &#123;<br>            agent &#123;<br>                label <span class="hljs-string">&quot;some-label&quot;</span><br>            &#125;<br>            when &#123;<br>                beforeAgent <span class="hljs-literal">true</span><br>                branch <span class="hljs-string">&#x27;production&#x27;</span><br>            &#125;<br>            steps &#123;<br>                echo <span class="hljs-string">&#x27;Deploying&#x27;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="parallel"><a href="#parallel" class="headerlink" title="parallel"></a>parallel</h3><p>声明式流水线的阶段可以在他们内部声明多隔嵌套阶段, 它们将并行执行。 注意，一个阶段必须只有一个 steps 或 parallel 的阶段。 嵌套阶段本身不能包含进一步的 parallel 阶段, 但是其他的阶段的行为与任何其他 stage 相同。任何包含 parallel 的阶段不能包含 agent 或 tools 阶段, 因为他们没有相关 steps。</p><p>另外, 通过添加 failFast true 到包含 parallel 的 stage 中， 当其中一个进程失败时，你可以强制所有的 parallel 阶段都被终止。</p><p>示例<br>Jenkinsfile (Declarative Pipeline)</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs groovy">pipeline &#123;<br>    agent any<br>    stages &#123;<br>        stage(<span class="hljs-string">&#x27;Non-Parallel Stage&#x27;</span>) &#123;<br>            steps &#123;<br>                echo <span class="hljs-string">&#x27;This stage will be executed first.&#x27;</span><br>            &#125;<br>        &#125;<br>        stage(<span class="hljs-string">&#x27;Parallel Stage&#x27;</span>) &#123;<br>            when &#123;<br>                branch <span class="hljs-string">&#x27;master&#x27;</span><br>            &#125;<br>            failFast <span class="hljs-literal">true</span><br>            parallel &#123;<br>                stage(<span class="hljs-string">&#x27;Branch A&#x27;</span>) &#123;<br>                    agent &#123;<br>                        label <span class="hljs-string">&quot;for-branch-a&quot;</span><br>                    &#125;<br>                    steps &#123;<br>                        echo <span class="hljs-string">&quot;On Branch A&quot;</span><br>                    &#125;<br>                &#125;<br>                stage(<span class="hljs-string">&#x27;Branch B&#x27;</span>) &#123;<br>                    agent &#123;<br>                        label <span class="hljs-string">&quot;for-branch-b&quot;</span><br>                    &#125;<br>                    steps &#123;<br>                        echo <span class="hljs-string">&quot;On Branch B&quot;</span><br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>声明式流水线可能使用在 流水线步骤引用中记录的所有可用的步骤, 它包含一个完整的步骤列表, 其中添加了下面列出的步骤，这些步骤只在声明式流水线中 only supported 。</p><h3 id="script"><a href="#script" class="headerlink" title="script"></a>script</h3><p>步骤需要 [scripted-pipeline]块并在声明式流水线中执行。 对于大多数用例来说,应该声明式流水线中的“脚本”步骤是不必要的， 但是它可以提供一个有用的”逃生出口”。 非平凡的规模和&#x2F;或复杂性的 script 块应该被转移到 共享库 。</p><p>示例<br>Jenkinsfile (Declarative Pipeline)</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs groovy">pipeline &#123;<br>    agent any<br>    stages &#123;<br>        stage(<span class="hljs-string">&#x27;Example&#x27;</span>) &#123;<br>            steps &#123;<br>                echo <span class="hljs-string">&#x27;Hello World&#x27;</span><br><br>                script &#123;<br>                    <span class="hljs-keyword">def</span> browsers = [<span class="hljs-string">&#x27;chrome&#x27;</span>, <span class="hljs-string">&#x27;firefox&#x27;</span>]<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; browsers.size(); ++i) &#123;<br>                        echo <span class="hljs-string">&quot;Testing the $&#123;browsers[i]&#125; browser&quot;</span><br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>脚本化流水线 不再详细介绍.</p>]]></content>
    
    
    <categories>
      
      <category>jenkins</category>
      
      <category>pipeline</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jenkins</tag>
      
      <tag>pipeline</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jenkins-pipeline的使用</title>
    <link href="/2023/03/14/jenkins-pipeline%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/03/14/jenkins-pipeline%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>Jenkins pipeline 是Jenkins 2.0 的精髓，，是帮助Jenkins 实现CI 到CD 转变的重要角色。 简单来说，就是一套运行于Jenkins 上的工作流框架，将原本独立运行于单个或者多个节点的任务连接起来，实现单个任务难以完成的复杂发布流程。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">在使用jenkins的pipeline时候,你可能需要注意下,一些潜在的插件是否已经安装.<br>git parameter<br>Active Choices<br>Git Pipeline<br>Active Choices parameter<br>等<br><br></code></pre></td></tr></table></figure><h2 id="pipeline"><a href="#pipeline" class="headerlink" title="pipeline"></a>pipeline</h2><p>分为2种: Declarative Pipeline (声明式) , Scripted Pipeline (脚本式)<br>实际生产种使用 声明式即可.</p><p>Declarative Pipeline:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-comment">// </span><br>pipeline &#123;<br>    agent any<br>    stages &#123;<br>        stage(<span class="hljs-string">&#x27;Build&#x27;</span>) &#123;<br>            steps &#123;<br>                <span class="hljs-comment">//</span><br>            &#125;<br>        &#125;<br>        stage(<span class="hljs-string">&#x27;Test&#x27;</span>) &#123;<br>            steps &#123;<br>                <span class="hljs-comment">//</span><br>            &#125;<br>        &#125;<br>        stage(<span class="hljs-string">&#x27;Deploy&#x27;</span>) &#123;<br>            steps &#123;<br>                <span class="hljs-comment">//</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Scripted Pipeline:</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><br>node &#123;  <br>    stage(<span class="hljs-string">&#x27;Build&#x27;</span>) &#123;<br>        <span class="hljs-comment">//</span><br>    &#125;<br>    stage(<span class="hljs-string">&#x27;Test&#x27;</span>) &#123;<br>        <span class="hljs-comment">//</span><br>    &#125;<br>    stage(<span class="hljs-string">&#x27;Deploy&#x27;</span>) &#123;<br>        <span class="hljs-comment">//</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Declarative Pipeline 最外层有个 pipeline 表明它是一个声明式流水线，下面会有 4 个主要的部分： agent，post，stages，steps，我会逐一介绍一下。</p><h3 id="Agent"><a href="#Agent" class="headerlink" title="Agent"></a>Agent</h3><p>agent 主要用于描述整个 Pipeline 或者指定的 Stage 由什么规则来选择节点执行。Pipeline 级别的 agent 可以视为 Stage 级别的默认值，如果 stage 中没有指定，将会使用与 Pipeline 一致的规则。在最新的 Jenkins 版本中，可以支持指定任意节点(any)，不指定(none)，标签(label)，节点(node)，docker，dockerfile 和 kubernetes 等，具体的配置细节可以查看文档，下面是一个使用 docker 的样例：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs groovy">agent &#123;<br>    docker &#123;<br>        image <span class="hljs-string">&#x27;myregistry.com/node&#x27;</span><br>        label <span class="hljs-string">&#x27;my-defined-label&#x27;</span><br>        registryUrl <span class="hljs-string">&#x27;https://myregistry.com/&#x27;</span><br>        registryCredentialsId <span class="hljs-string">&#x27;myPredefinedCredentialsInJenkins&#x27;</span><br>        args <span class="hljs-string">&#x27;-v /tmp:/tmp&#x27;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Tips:</p><p>如果 Pipeline 选择了 none，那么 stage 必须要指定一个有效的 agent，否则无法执行<br>agent 指定的是规则而不是具体的节点，如果 stage 各自配置了自己的 agent，需要注意是不是在同一个节点执行的</p><h3 id="Stages-amp-amp-Stage"><a href="#Stages-amp-amp-Stage" class="headerlink" title="Stages &amp;&amp; Stage"></a>Stages &amp;&amp; Stage</h3><p>Stages 是 Pipeline 中最主要的组成部分，Jenkins 将会按照 Stages 中描述的顺序从上往下的执行。Stages 中可以包括任意多个 Stage，而 Stage 与 Stages 又能互相嵌套，除此以外还有 parallel 指令可以让内部的 Stage 并行运行。实际上可以把 Stage 当作最小单元.<br>Stages 指定的是顺序运行，而 parallel 指定的是并行运行。</p><p>接下来的这个 case 很好的说明了这一点：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs groovy">pipeline &#123;<br>    agent none<br>    stages &#123;<br>        stage(<span class="hljs-string">&#x27;Sequential&#x27;</span>) &#123;<br>            stages &#123;<br>                stage(<span class="hljs-string">&#x27;In Sequential 1&#x27;</span>) &#123;<br>                    steps &#123;<br>                        echo <span class="hljs-string">&quot;In Sequential 1&quot;</span><br>                    &#125;<br>                &#125;<br>                stage(<span class="hljs-string">&#x27;In Sequential 2&#x27;</span>) &#123;<br>                    steps &#123;<br>                        echo <span class="hljs-string">&quot;In Sequential 2&quot;</span><br>                    &#125;<br>                &#125;<br>                stage(<span class="hljs-string">&#x27;Parallel In Sequential&#x27;</span>) &#123;<br>                    parallel &#123;<br>                        stage(<span class="hljs-string">&#x27;In Parallel 1&#x27;</span>) &#123;<br>                            steps &#123;<br>                                echo <span class="hljs-string">&quot;In Parallel 1&quot;</span><br>                            &#125;<br>                        &#125;<br>                        stage(<span class="hljs-string">&#x27;In Parallel 2&#x27;</span>) &#123;<br>                            steps &#123;<br>                                echo <span class="hljs-string">&quot;In Parallel 2&quot;</span><br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>除了指定 Stage 之间的顺序关系之外，我们还可以通过 when 来指定某个 Stage 指定与否：比如要配置只有在 Master 分支上才执行 push，其他分支上都只运行 build</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs groovy">stages &#123;<br>  stage(<span class="hljs-string">&#x27;Build&#x27;</span>) &#123;<br>    when &#123;<br>      not &#123; branch <span class="hljs-string">&#x27;master&#x27;</span> &#125;<br>    &#125;<br>    steps &#123;<br>      sh <span class="hljs-string">&#x27;./scripts/run.py build&#x27;</span><br>    &#125;<br>  &#125;<br>  stage(<span class="hljs-string">&#x27;Run&#x27;</span>) &#123;<br>    when &#123;<br>      branch <span class="hljs-string">&#x27;master&#x27;</span><br>    &#125;<br>    steps &#123;<br>      sh <span class="hljs-string">&#x27;./scripts/run.py push&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>还能在 Stage 的级别设置 environment，这些就不展开了，文档里有更详细的描述。</p><h3 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h3><p>steps 是 Pipeline 中最核心的部分，每个 Stage 都需要指定 Steps。Steps 内部可以执行一系列的操作，任意操作执行出错都会返回错误。完整的 Steps 操作列表可以参考 Pipeline Steps Reference，这里只说一些使用时需要注意的点。</p><p>groovy 语法中有不同的字符串类型，其中 ‘abc’ 是 Plain 字符串，不会转义 ${WROKSPACE} 这样的变量，而 “abc” 会做这样的转换。此外还有 ‘’’ xxx ‘’’ 支持跨行字符串，””” 同理。<br>调用函数的 () 可以省略，使得函数调用形如 updateGitlabCommitStatus name: ‘build’, state: ‘success’，通过 , 来分割不同的参数，支持换行。<br>可以在声明式流水线中通过 script 来插入一段 groovy 脚本</p><h3 id="Post"><a href="#Post" class="headerlink" title="Post"></a>Post</h3><p>post 部分将会在 pipeline 的最后执行，经常用于一些测试完毕后的清理和通知操作。文档中给出了一系列的情况，比较常用的是 always，success 和 failure。</p><p>比如说下面的脚本将会在成功和失败的时候更新 gitlab 的状态，在失败的时候发送通知邮件：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs groovy">post &#123;<br>  failure &#123;<br>    updateGitlabCommitStatus <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;build&#x27;</span>, <span class="hljs-attr">state:</span> <span class="hljs-string">&#x27;failed&#x27;</span><br>    emailext <span class="hljs-attr">body:</span> <span class="hljs-string">&#x27;$DEFAULT_CONTENT&#x27;</span>, <span class="hljs-attr">recipientProviders:</span> [culprits()], <span class="hljs-attr">subject:</span> <span class="hljs-string">&#x27;$DEFAULT_SUBJECT&#x27;</span><br>  &#125;<br>  success &#123;<br>    updateGitlabCommitStatus <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;build&#x27;</span>, <span class="hljs-attr">state:</span> <span class="hljs-string">&#x27;success&#x27;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>每个状态其实都相当于于一个 steps，都能够执行一系列的操作，不同状态的执行顺序是事先规定好的，就是文档中列出的顺序。</p>]]></content>
    
    
    <categories>
      
      <category>jenkins</category>
      
      <category>pipeline</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jenkins</tag>
      
      <tag>pipeline</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jenkins使用systemd纳管</title>
    <link href="/2023/03/14/jenkins%E4%BD%BF%E7%94%A8systemd%E7%BA%B3%E7%AE%A1/"/>
    <url>/2023/03/14/jenkins%E4%BD%BF%E7%94%A8systemd%E7%BA%B3%E7%AE%A1/</url>
    
    <content type="html"><![CDATA[<p>最近又把jenkins捡起来用了,还是jenkins好用,想怎么自定义流程都可以自己随心定制,不求人.</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pwd</span><br>/data/jenkins_2_375_3<br>ll -al<br>total 92036<br>drwxr-xr-x 14 root root     4096 Feb 16 16:16 home<br>-rw-r--r--  1 root root 94238599 Feb 16 14:07 jenkins.war<br>drwxr-xr-x  2 root root       25 Feb 16 14:28 logs<br>drwxr-xr-x  2 root root       25 Feb 16 13:49 soft<br>ll /usr/local/jdk-17.0.2/<br>total 20<br>drwxr-xr-x  2 root  root  4096 Feb 16 13:36 bin<br>drwxr-xr-x  5 root  root   123 Feb 16 13:36 conf<br>drwxr-xr-x  3 root  root   132 Feb 16 13:36 include<br>drwxr-xr-x  2 root  root  4096 Feb 16 13:36 jmods<br>drwxr-xr-x 72 root  root  4096 Feb 16 13:36 legal<br>drwxr-xr-x  5 root  root  4096 Feb 16 13:36 lib<br>-rw-r--r--  1 10668 10668 1210 Dec  8  2021 release<br><br></code></pre></td></tr></table></figure><p>本环境jenkins使用的版本: 2.375.3<br>openjdk 版本: 17.0.2<br>现在较新的jenkins版本依赖的openjdk版本不再是jdk 1.8了,使用1.8版本在jenkins里会提示一坨警告.<br>本openjdk下载地址: <a href="https://jdk.java.net/archive/">https://jdk.java.net/archive/</a></p><h2 id="systemd-管理"><a href="#systemd-管理" class="headerlink" title="systemd 管理"></a>systemd 管理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># jenkins环境变量文件</span><br><span class="hljs-built_in">cat</span> /etc/sysconfig/jenkins<br>JENKINS_WAR=/data/jenkins_2_375_3/jenkins.war<br><br>JENKINS_HOME=/data/jenkins_2_375_3/home<br><br>JAVA_OPTS=-Djava.awt.headless=<span class="hljs-literal">true</span> -XX:+UseStringDeduplication<br>JENKINS_ARGS=<span class="hljs-string">&quot;--httpPort=18080 \</span><br><span class="hljs-string">  --logfile=/data/jenkins_2_375_3/logs/jenkins.log \</span><br><span class="hljs-string">  --javaHome=/usr/local/jdk-17.0.2&quot;</span><br><br><span class="hljs-comment"># service文件</span><br>systemctl <span class="hljs-built_in">cat</span> jenkins.service <br><span class="hljs-comment"># /usr/lib/systemd/system/jenkins.service</span><br>[Unit]<br>Description=Jenkins<br>After=network.target<br><br>[Service]<br>Type=simple<br>EnvironmentFile=/etc/sysconfig/jenkins<br>ExecStart=/usr/local/jdk-17.0.2/bin/java <span class="hljs-variable">$JAVA_OPTS</span>  -jar <span class="hljs-variable">$JENKINS_WAR</span> <span class="hljs-variable">$JENKINS_ARGS</span><br>Restart=always<br>RestartSec=10<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>jenkins</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>buildx 静态构建 static link build</title>
    <link href="/2023/03/14/buildx-%E9%9D%99%E6%80%81%E6%9E%84%E5%BB%BAkeepalived-static-link-build/"/>
    <url>/2023/03/14/buildx-%E9%9D%99%E6%80%81%E6%9E%84%E5%BB%BAkeepalived-static-link-build/</url>
    
    <content type="html"><![CDATA[<p>观摩一位大佬的博客,发现这keepalived构建很有意思.后续工作可能会遇到,拿来秀一把.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 完整dockerfile</span><br>FROM alpine as build<br>RUN <span class="hljs-keyword">if</span> [ -f /etc/apk/repositories ];<span class="hljs-keyword">then</span> sed -i <span class="hljs-string">&#x27;s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g&#x27;</span> /etc/apk/repositories; <span class="hljs-keyword">fi</span> &amp;&amp; \<br>    <span class="hljs-keyword">if</span> [ -f /etc/apt/sources.list ];<span class="hljs-keyword">then</span> sed -ri <span class="hljs-string">&#x27;s/(deb|security).debian.org/mirrors.aliyun.com/g&#x27;</span> /etc/apt/sources.list; <span class="hljs-keyword">fi</span> &amp;&amp; \<br>    <span class="hljs-keyword">if</span> [ ! -e /etc/nsswitch.conf ];<span class="hljs-keyword">then</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;hosts: files dns myhostname&#x27;</span> &gt; /etc/nsswitch.conf; <span class="hljs-keyword">fi</span>  &amp;&amp; \<br>    apk --no-cache add \<br>        binutils \<br>        file \<br>        file-dev \<br>        gcc \<br>        glib \<br>        glib-dev \<br>        ipset \<br>        ipset-dev \<br>        iptables \<br>        iptables-dev \<br>        libmnl-dev \<br>        libnftnl-dev \<br>        libnl3 \<br>        libnl3-dev \<br>        make \<br>        musl-dev \<br>        net-snmp-dev \<br>        openssl \<br>        openssl-dev \<br>        openssl-libs-static \<br>        pcre2 \<br>        pcre2-dev \<br>        autoconf \<br>        automake zlib-static  alpine-sdk linux-headers  libmnl-static git<br>WORKDIR /opt<br>RUN git <span class="hljs-built_in">clone</span> https://github.com/acassen/keepalived.git<br><br>RUN <span class="hljs-built_in">set</span> -ex &amp;&amp; \<br>    <span class="hljs-built_in">cd</span> /opt/keepalived &amp;&amp; \<br>    ./autogen.sh &amp;&amp; \<br>    CFLAGS=<span class="hljs-string">&#x27;-static -s&#x27;</span> LDFLAGS=-static ./configure  --disable-dynamic-linking \<br>    --prefix=/usr \<br>    --exec-prefix=/usr \<br>    --bindir=/usr/bin \<br>    --sbindir=/usr/sbin \<br>    --sysconfdir=/etc \<br>    --datadir=/usr/share \<br>    --localstatedir=/var \<br>    --mandir=/usr/share/man \<br>    --enable-bfd \<br>    --enable-snmp \<br>    --enable-snmp-rfc \<br>    --enable-nftables \<br>    --enable-regex \<br>    --enable-json  --with-init=systemd --enable-vrrp --enable-libnl-dynamic<br>RUN <span class="hljs-built_in">set</span> -ex &amp;&amp; \<br>    <span class="hljs-built_in">cd</span> /opt/keepalived &amp;&amp; \<br>    make &amp;&amp; \<br>    make DESTDIR=/install_root install &amp;&amp; \<br>    find /install_root &amp;&amp; \<br><span class="hljs-comment"># delete the docs</span><br>    <span class="hljs-built_in">rm</span> -rf /install_root/usr/share<br><br>FROM scratch AS bin<br>COPY --from=build /install_root /<br><br></code></pre></td></tr></table></figure><p>构建:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker buildx build  . --platform linux/amd64,linux/arm64 \<br>    --target bin --output . <br><br><span class="hljs-comment"># 构建完成之后目录如下:</span><br> ll<br>total 55848<br>-rw-r--r--  1 root root     1778 Mar 11 13:44 dockerfile<br>-rw-r--r--  1 root root     1772 Mar 11 13:37 dockerfile.0311bak<br>-rw-r--r--  1 root root       52 Mar 10 15:18 dockerfile.bak<br>-rw-r--r--  1 root root       63 Mar 10 15:55 Dockerfile.bak<br>drwxrwxrwx 16 root root     4096 Mar 11 13:36 keepalived<br>-rw-rw-rw-  1 root root 21871546 Mar 11 13:37 keepalived.tar.gz<br>drwxr-xr-x  4 root root     4096 Jan  1  1970 linux_amd64<br>drwxr-xr-x  4 root root     4096 Jan  1  1970 linux_arm64<br>-rw-------  1 root root 35286016 Mar 10 15:25 tonistiigi.tar<br><br><span class="hljs-comment"># 其中 linux_amd64 ,linux_arm64就是构建目标的目录.</span><br><br>$ ./usr/sbin/keepalived -v<br>Keepalived v2.2.7 (02/23,2022), git commit v2.2.7-22-geb533a93<br><br>Copyright(C) 2001-2022 Alexandre Cassen, &lt;acassen@gmail.com&gt;<br><br>Built with kernel headers <span class="hljs-keyword">for</span> Linux 5.10.41<br>Running on Linux 5.4.0-99-generic <span class="hljs-comment">#112-Ubuntu SMP Thu Feb 3 13:50:55 UTC 2022</span><br>Distro: Ubuntu 20.04.3 LTS<br><br>configure options: --disable-dynamic-linking --prefix=/usr --exec-prefix=/usr --bindir=/usr/bin --sbindir=/usr/sbin --sysconfdir=/etc --datadir=/usr/share --localstatedir=/var --mandir=/usr/share/man --enable-bfd --enable-snmp --enable-snmp-rfc --enable-nftables --enable-regex --enable-json --with-init=systemd --enable-vrrp --enable-libnl-dynamic CFLAGS=-static -s LDFLAGS=-static<br><br>Config options:  NFTABLES LVS REGEX VRRP VRRP_AUTH VRRP_VMAC JSON BFD OLD_CHKSUM_COMPAT SNMP_V3_FOR_V2 SNMP_VRRP SNMP_CHECKER SNMP_RFCV2 SNMP_RFCV3 INIT=systemd<br><br>System options:  VSYSLOG MEMFD_CREATE IPV6_MULTICAST_ALL IPV4_DEVCONF RTA_ENCAP RTA_EXPIRES RTA_NEWDST RTA_PREF FRA_SUPPRESS_PREFIXLEN FRA_SUPPRESS_IFGROUP FRA_TUN_ID RTAX_CC_ALGO RTAX_QUICKACK RTEXT_FILTER_SKIP_STATS FRA_L3MDEV FRA_UID_RANGE RTAX_FASTOPEN_NO_COOKIE RTA_VIA FRA_PROTOCOL FRA_IP_PROTO FRA_SPORT_RANGE FRA_DPORT_RANGE RTA_TTL_PROPAGATE IFA_FLAGS LWTUNNEL_ENCAP_MPLS LWTUNNEL_ENCAP_ILA NET_LINUX_IF_H_COLLISION NETINET_LINUX_IF_ETHER_H_COLLISION IPVS_DEST_ATTR_ADDR_FAMILY IPVS_SYNCD_ATTRIBUTES IPVS_64BIT_STATS IPVS_TUN_TYPE IPVS_TUN_CSUM IPVS_TUN_GRE VRRP_IPVLAN IFLA_LINK_NETNSID INET6_ADDR_GEN_MODE VRF SO_MARK<br><br>$ ldd usr/sbin/keepalived <br>        not a dynamic executable<br>$ file usr/sbin/keepalived<br>usr/sbin/keepalived: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, stripped<br><br>$ <span class="hljs-built_in">ls</span> -lh ./usr/sbin/keepalived<br>-rwxr-xr-x 1 root root 5.2M Mar 11 13:46 ./usr/sbin/keepalived<br></code></pre></td></tr></table></figure><p>试了下 arm64的CPU架构机器的也可以构建 –platform linux&#x2F;amd64,linux&#x2F;arm64 即可。</p>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker 基于 buildx 构建跨平台镜像</title>
    <link href="/2023/03/14/docker-%E5%9F%BA%E4%BA%8E-buildx-%E6%9E%84%E5%BB%BA%E8%B7%A8%E5%B9%B3%E5%8F%B0%E9%95%9C%E5%83%8F/"/>
    <url>/2023/03/14/docker-%E5%9F%BA%E4%BA%8E-buildx-%E6%9E%84%E5%BB%BA%E8%B7%A8%E5%B9%B3%E5%8F%B0%E9%95%9C%E5%83%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="docker-基于-buildx-构建跨平台镜像"><a href="#docker-基于-buildx-构建跨平台镜像" class="headerlink" title="docker 基于 buildx 构建跨平台镜像"></a>docker 基于 buildx 构建跨平台镜像</h2><p>buildx 现在作为一个跨平台构建工具已经十分的成熟了.在 x86_64 平台上使用 docker buildx 构建多平台的 docker image.<br>在 Docker 19.03+ 版本中可以使用 docker buildx build 命令使用 BuildKit 构建镜像。该命令支持 –platform 参数可以同时构建支持多种系统架构的 Docker 镜像，大大简化了构建步骤。<br>官方建议 kernel 内核 高于 4.8以上,本机 版本为 :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -a<br>Linux mid1 4.19.113-14.nfs4.x86_64 <span class="hljs-comment">#1 SMP Wed Jul 28 19:53:18 CST 2021 x86_64 x86_64 x86_64 GNU/Linux</span><br></code></pre></td></tr></table></figure><ol><li>安装docker</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y yum-utils device-mapper-persistent-data lvm2<br>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br>yum makecache fast<br>yum -y install docker-ce<br>systemdctl start docker<br><br></code></pre></td></tr></table></figure><ol start="2"><li>判断当前 docker 环境中是否已有 buildx</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker --<span class="hljs-built_in">help</span> | grep buildx || <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Buildx not installed&quot;</span><br>docker buildx version<br>github.com/docker/buildx v0.10.2 00ed17d<br><br></code></pre></td></tr></table></figure><ol start="3"><li>开启多平台构建</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --privileged --<span class="hljs-built_in">rm</span> tonistiigi/binfmt --install all <span class="hljs-comment"># all 选项 是全平台.</span><br>&#123;<br>  <span class="hljs-string">&quot;supported&quot;</span>: [<br>    <span class="hljs-string">&quot;linux/amd64&quot;</span>,<br>    <span class="hljs-string">&quot;linux/arm64&quot;</span>,<br>    <span class="hljs-string">&quot;linux/riscv64&quot;</span>,<br>    <span class="hljs-string">&quot;linux/ppc64le&quot;</span>,<br>    <span class="hljs-string">&quot;linux/s390x&quot;</span>,<br>    <span class="hljs-string">&quot;linux/386&quot;</span>,<br>    <span class="hljs-string">&quot;linux/mips64le&quot;</span>,<br>    <span class="hljs-string">&quot;linux/mips64&quot;</span>,<br>    <span class="hljs-string">&quot;linux/arm/v7&quot;</span>,<br>    <span class="hljs-string">&quot;linux/arm/v6&quot;</span><br>  ],<br>  <span class="hljs-string">&quot;emulators&quot;</span>: [<br>    <span class="hljs-string">&quot;qemu-aarch64&quot;</span>,<br>    <span class="hljs-string">&quot;qemu-arm&quot;</span>,<br>    <span class="hljs-string">&quot;qemu-mips64&quot;</span>,<br>    <span class="hljs-string">&quot;qemu-mips64el&quot;</span>,<br>    <span class="hljs-string">&quot;qemu-ppc64le&quot;</span>,<br>    <span class="hljs-string">&quot;qemu-riscv64&quot;</span>,<br>    <span class="hljs-string">&quot;qemu-s390x&quot;</span><br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>初次构建报错</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 报错信息: multiple platforms feature is currently not supported for docker driver</span><br><br>docker buildx create --name mybuilder <br><br>docker buildx use mybuilder<br></code></pre></td></tr></table></figure><ol start="5"><li>buildx测试</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建dockerfile</span><br><span class="hljs-built_in">cat</span> &gt; Dockerfile &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">FROM --platform=$TARGETPLATFORM alpine</span><br><span class="hljs-string">RUN uname -a &gt; /os.txt</span><br><span class="hljs-string">CMD cat /os.txt</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment"># docker login 登录 dockerhub</span><br><br><span class="hljs-comment"># 开始构建, --push 将构建好的镜像推送到dockerhub.</span><br>docker buildx build --platform linux/amd64,linux/arm64/v8 -t caoye126/alpine-multi-platform . --push<br><br>docker images<br>REPOSITORY          TAG               IMAGE ID       CREATED         SIZE<br>tonistiigi/binfmt   latest            fac5f9edad96   15 months ago   35.3MB<br>moby/buildkit       buildx-stable-1   19340e24de14   15 months ago   144MB<br><br>docker images<br>REPOSITORY          TAG               IMAGE ID       CREATED         SIZE<br>tonistiigi/binfmt   latest            fac5f9edad96   15 months ago   35.3MB<br>moby/buildkit       buildx-stable-1   19340e24de14   15 months ago   144MB<br><br><span class="hljs-comment"># 这时查看本地images 是看不到 刚刚构建的 镜像的。只有moby/buildkit 这个。</span><br><br><span class="hljs-comment"># 查看镜像信息</span><br>docker buildx imagetools inspect caoye126/alpine-multi-platform<br>Name:      docker.io/caoye126/alpine-multi-platform:latest<br>MediaType: application/vnd.docker.distribution.manifest.list.v2+json<br>Digest:    sha256:4ea7e4bb49b950673d74d4a82d3fb8330568b6f02e3469e03af3f715a6143174<br>           <br>Manifests: <br>  Name:      docker.io/caoye126/alpine-multi-platform:latest@sha256:74ebe4a08c7b33c4fcf9fb95a5e61ee69fd843fad0af290b6db56f92744d48ea<br>  MediaType: application/vnd.docker.distribution.manifest.v2+json<br>  Platform:  linux/amd64<br>             <br>  Name:      docker.io/caoye126/alpine-multi-platform:latest@sha256:9d3409a852cc36258c1e4716c7adb32b00faab5810b49701518a51e9cab7b3a0<br>  MediaType: application/vnd.docker.distribution.manifest.v2+json<br>  Platform:  linux/arm64<br><br><span class="hljs-comment"># 到dockerhub 查看 已经有镜像了</span><br><span class="hljs-comment"># 分别到x86 和arm64 机器上 pull 刚刚到镜像。</span><br><br><span class="hljs-comment"># x86_64</span><br>docker run --<span class="hljs-built_in">rm</span> caoye126/alpine-multi-platform<br>Unable to find image <span class="hljs-string">&#x27;caoye126/alpine-multi-platform:latest&#x27;</span> locally<br>latest: Pulling from caoye126/alpine-multi-platform<br>63b65145d645: Pull complete <br>0e30a703e096: Pull complete <br>Digest: sha256:4ea7e4bb49b950673d74d4a82d3fb8330568b6f02e3469e03af3f715a6143174<br>Status: Downloaded newer image <span class="hljs-keyword">for</span> caoye126/alpine-multi-platform:latest<br>Linux buildkitsandbox 4.19.113-14.nfs4.x86_64 <span class="hljs-comment">#1 SMP Wed Jul 28 19:53:18 CST 2021 x86_64 Linux</span><br><br><span class="hljs-comment"># arm64</span><br><br>docker run --<span class="hljs-built_in">rm</span> caoye126/alpine-multi-platform<br>Unable to find image <span class="hljs-string">&#x27;caoye126/alpine-multi-platform:latest&#x27;</span> locally<br>latest: Pulling from caoye126/alpine-multi-platform<br>af6eaf76a39c: Already exists <br>20365c33e862: Pull complete <br>Digest: sha256:4ea7e4bb49b950673d74d4a82d3fb8330568b6f02e3469e03af3f715a6143174<br>Status: Downloaded newer image <span class="hljs-keyword">for</span> caoye126/alpine-multi-platform:latest<br>Linux buildkitsandbox 4.19.113-14.nfs4.x86_64 <span class="hljs-comment">#1 SMP Wed Jul 28 19:53:18 CST 2021 aarch64 Linux</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>buildx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo-搭建-github.io-个人博客</title>
    <link href="/2023/03/13/hexo-%E6%90%AD%E5%BB%BA-github-io-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/03/13/hexo-%E6%90%AD%E5%BB%BA-github-io-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>github.io 可以搭建个人免费博客，既能展示个人的小站，又能做记录，养成好习惯。<br>本人所示环境为win10+vscode+wsl</p><p>一.环境准备<br>1、wsl<br>win10下的wsl作为日常开发环境非常好用，具体请自行gogle。<br>2、git<br>在wsl的虚拟centos7下安装git。<br>3、node.js<br>centos7下安装<br>该脚本会将NodeSource签名密钥添加到您的系统，创建yum储存库文件，安装所有必需的软件包，并刷新yum缓存。<br>如果您需要另一个Node.js版本， 比如14.x，将setup_16.x更改为setup_14.x</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -fsSL https://rpm.nodesource.com/setup_16.x | sudo bash -<br><br>yum install -y nodejs<br><br>node --version<br>npm --version<br></code></pre></td></tr></table></figure><p>二.hexo安装部署</p><ol><li>安装hexo</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br>hexo init hexo-blog <span class="hljs-comment">#创建目录&lt;hexo-blog&gt;并初始化</span><br><span class="hljs-built_in">cd</span> hexo-blog<br>npm install<br><br></code></pre></td></tr></table></figure><ol start="2"><li>测试hexo</li></ol><p>如果启动过程中没有报错，此时可以用浏览器访问 <a href="http://localhost:4000/">http://localhost:4000/</a> ，会出现一个Hello World的博客页面，hexo使用的默认主题是landscape，而且此时的服务是本地启动的，别人并不能看到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate <span class="hljs-comment">#生成静态文件</span><br>hexo server <span class="hljs-comment">#启动本地服务器,用于本地调试.</span><br><br></code></pre></td></tr></table></figure><ol start="3"><li>github 设定</li></ol><p>进入GitHub官网，官网地址： <a href="https://github.com/">https://github.com</a> ，登入自己的账号，新建一个仓库，<br>这里 caoye126 可以自定义，结尾一定要是.github.io , caoye126.github.io<br><a href="https://caoye126.github.io/">https://caoye126.github.io</a> ,这个将会是部署好之后访问的域名,配置好之后点击Create repository即可以创建好仓库，建好仓库之后，把仓库克隆到本地，然后把搭建好的博客项目复制到当前的仓库下面。</p><ol start="4"><li>更换新主题</li></ol><p>本人用的 主题 是 fluid.<br>具体地址: <a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">https://github.com/fluid-dev/hexo-theme-fluid/releases</a><br>将最新版本下载到 themes 目录下,并将 release 目录改为 fluid</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pwd</span>                                                                                                                                                         caoye126.github.io<br>/mnt/d/hexo-blog<br><br> 2023-03-13 15:31:56 ⌚  DESKTOP-RCTTT1C <span class="hljs-keyword">in</span> /mnt/d/hexo-blog<br>○ → ll themes/<br>total 0<br>drwxrwxrwx 1 root root 512 Mar 11 15:20 .<br>drwxrwxrwx 1 root root 512 Mar 11 17:48 ..<br>drwxrwxrwx 1 root root 512 Dec 13 21:12 fluid<br>-rwxrwxrwx 1 root root   0 Mar 11 15:04 .gitkeep<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 修改 _config.yml 对应配置项目</span><br><span class="hljs-built_in">cd</span> hexo-blog<br>vim _config.yml<br>theme: fluid  <span class="hljs-comment"># 指定主题</span><br>language: zh-CN  <span class="hljs-comment"># 指定语言</span><br><br></code></pre></td></tr></table></figure><ol start="5"><li>创建关于页</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page about<br>创建成功后，编辑博客目录下 /source/about/index.md，添加 layout 属性。<br>---<br>title: about<br><span class="hljs-built_in">date</span>: 2020-02-23 19:20:33<br>layout: about<br>---<br><br>这里写关于页的正文，支持 Markdown, HTML<br><br></code></pre></td></tr></table></figure><ol start="6"><li>开始写第一篇文章</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new hexo-搭建-github.io-个人博客<br><br></code></pre></td></tr></table></figure><p>在vscode 编辑 source&#x2F;_posts&#x2F;hexo-搭建-github-io-个人博客.md</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 这里是 博客的属性,可以定于 归类 和 标签.</span><br>---<br>title: hexo-搭建-github.io-个人博客<br><span class="hljs-built_in">date</span>: 2023-03-13 10:09:32<br>tags: [hexo,github]<br>category: hexo<br>---<br><span class="hljs-comment"># 下面开始写文章正文.</span><br><br></code></pre></td></tr></table></figure><ol start="7"><li>设置github 仓库 对应设置</li></ol><p>_config.yml 中</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:caoye126/caoye126.github.io.git</span><br>  <span class="hljs-attr">brach:</span> <span class="hljs-string">master</span><br><br></code></pre></td></tr></table></figure><ol start="8"><li>github 绑定wsl下的 ssh 公钥</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/root/.ssh/id_rsa.pub <span class="hljs-comment">#内容 填到github个人账户 setting里 ssh key 处. </span><br></code></pre></td></tr></table></figure><ol start="9"><li>hexo 安装git插件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git<br><br></code></pre></td></tr></table></figure><ol start="9"><li>推送文章</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br>hexo d<br></code></pre></td></tr></table></figure><ol start="9"><li>访问自己的个人博客</li></ol><p>个人主页: <a href="https://caoye126.github.io/">https://caoye126.github.io/</a></p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ansible-errors处理机制</title>
    <link href="/2023/03/11/ansible-errors%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/"/>
    <url>/2023/03/11/ansible-errors%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p>ansible条件errors处理机制</p><p>一、概述<br>当Ansible从一个命令接收到一个非零的返回码或从一个模块接收到一个故障时，默认情况下它会停止在该主机上执行，并在其他主机上继续执行。</p><p>然而，在某些情况下，您可能需要不同的行为。有时，非零返回码表示成功。有时，您希望一台主机上的故障停止所有主机上的执行。Ansible提供了<br>处理这些情况的工具和设置，并帮助您获得所需的行为、输出和报告。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs text">Ignoring failed commands 忽略命令失败<br>Ignoring unreachable host errors 忽略不可达的主机错误<br>Resetting unreachable hosts 重新设置不可到达的主机<br>Handlers and failure 处理程序和失败<br>Defining failure 定义失败<br>Defining “changed”定义“改变”<br>Ensuring success for command and shell 确保成功的命令和shell<br>Aborting a play on all hosts 在所有主机上终止一个play<br>Aborting on the first error: any_errors_fatal 在第一个错误时中止:any_errors_fatal<br>Setting a maximum failure percentage 设置最大失败百分比<br>Controlling errors in blocks 在blocks区块上控制errors<br></code></pre></td></tr></table></figure><p>二、配置</p><p>1、忽略命令失败<br>默认情况下，当主机上的任务失败时，Ansible会停止执行该主机上的任务。使用ignore_errors，即使碰到任务失败，仍会继续下面的任务:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Do</span> <span class="hljs-string">not</span> <span class="hljs-string">count</span> <span class="hljs-string">this</span> <span class="hljs-string">as</span> <span class="hljs-string">a</span> <span class="hljs-string">failure</span><br>  <span class="hljs-attr">shell:</span> <span class="hljs-string">/bin/false</span><br>  <span class="hljs-attr">ignore_errors:</span> <span class="hljs-literal">yes</span><br><span class="hljs-string">ignore_errors指令仅在任务能够运行并返回值为failed时有效。它不会使Ansible忽略未定义的变量错误、连接失败、执行问题(例如，丢失包)或语法错误。</span><br></code></pre></td></tr></table></figure><p>2、忽略不可达的主机错误</p><p>您可以使用ignore_unreachable关键字忽略由于主机实例为UNREACHABLE 而导致的任务失败。Ansible忽略任务错误，但继续对不可达的主机执行后续的任务。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br><span class="hljs-number">1</span><span class="hljs-string">）在task中使用：</span><br><br><span class="hljs-comment"># task1中忽略不可达的主机继续执行；task2不忽略不可达主机，且该不可达主机终止执行</span><br><br><span class="hljs-attr">tasks:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">task1</span><br>      <span class="hljs-attr">command:</span> <span class="hljs-string">/bin/true</span><br>      <span class="hljs-attr">ignore_unreachable:</span> <span class="hljs-literal">yes</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">task2</span><br>      <span class="hljs-attr">command:</span> <span class="hljs-string">/bin/true</span><br><br><span class="hljs-number">2</span><span class="hljs-string">）在play中使用：</span><br><br><span class="hljs-comment"># 所有tasks忽略不可达的主机，task1：忽略不可达主机继续执行play，tasks2：不忽略不可达主机且该不可达主机终止执行</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">all</span><br>  <span class="hljs-attr">ignore_unreachable:</span> <span class="hljs-literal">yes</span><br>  <span class="hljs-attr">tasks:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">task1</span><br>       <span class="hljs-attr">command:</span> <span class="hljs-string">/bin/true</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">task2</span><br>       <span class="hljs-attr">command:</span> <span class="hljs-string">/bin/true</span><br>       <span class="hljs-attr">ignore_unreachable:</span> <span class="hljs-literal">no</span><br></code></pre></td></tr></table></figure><p>3、重新设置不可到达的主机</p><p>如果Ansible无法连接到某个主机，它会将该主机标记为unreachable，并将其从运行的活动主机列表中删除。<br>您可以使用meta: clear_host_errors重新激活所有主机，以便后续任务可以尝试再次访问它们。</p><p>4、处理程序和失败</p><p>如果一个任务通知了一个handler ，但另一个任务在稍后的运行中失败，默认情况下handler 不会在该主机上运行，这可能会使主机处于意外状态。<br>例如，一个任务可以更新配置文件并通知handler 重新启动某些服务。如果同一task中稍后的任务失败，则可能只会更改配置文件，而不会重新启动服务。</p><p>你可以通过–force-handlers命令行选项来改变这种行为，方法是在play中包含force_handlers: True，或者在ansible.cfg中添加force_handlers &#x3D; True。<br>当handler 被强制执行时，Ansible将在所有主机上运行所有通知的handler ，甚至是任务失败的主机。<br>(注意，某些错误仍然会阻止处理程序运行，比如主机变得不可访问。）</p><p>5、定义失败</p><p>Ansible允许你在每个任务中使用failed_when条件定义“failure”的含义。<br>多个failed_when条件的列表使用隐式的and连接，这意味着任务只有在满足所有条件时才会失败。如果希望在满足任何条件时触发失败，则必须使用<br>显式或操作符在字符串中定义条件。</p><p>您可以通过在命令的输出中搜索一个单词或短语来检查是否失败:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Fail</span> <span class="hljs-string">task</span> <span class="hljs-string">when</span> <span class="hljs-string">the</span> <span class="hljs-string">command</span> <span class="hljs-string">error</span> <span class="hljs-string">output</span> <span class="hljs-string">prints</span> <span class="hljs-string">FAILED</span><br>  <span class="hljs-attr">command:</span> <span class="hljs-string">/usr/bin/example-command</span> <span class="hljs-string">-x</span> <span class="hljs-string">-y</span> <span class="hljs-string">-z</span><br>  <span class="hljs-attr">register:</span> <span class="hljs-string">command_result</span><br>  <span class="hljs-attr">failed_when:</span> <span class="hljs-string">&quot;&#x27;FAILED&#x27; in command_result.stderr&quot;</span><br><br><span class="hljs-string">基于返回码：</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Fail</span> <span class="hljs-string">task</span> <span class="hljs-string">when</span> <span class="hljs-string">both</span> <span class="hljs-string">files</span> <span class="hljs-string">are</span> <span class="hljs-string">identical</span><br>  <span class="hljs-attr">raw:</span> <span class="hljs-string">diff</span> <span class="hljs-string">foo/file1</span> <span class="hljs-string">bar/file2</span><br>  <span class="hljs-attr">register:</span> <span class="hljs-string">diff_cmd</span><br>  <span class="hljs-attr">failed_when:</span> <span class="hljs-string">diff_cmd.rc</span> <span class="hljs-string">==</span> <span class="hljs-number">0</span> <span class="hljs-string">or</span> <span class="hljs-string">diff_cmd.rc</span> <span class="hljs-string">&gt;=</span> <span class="hljs-number">2</span><br><br><br><span class="hljs-string">还可以组合多个失败条件。如果两个条件都为真，该任务将失败:</span><br><br><span class="hljs-comment"># 检查某个文件是否存在</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Check</span> <span class="hljs-string">if</span> <span class="hljs-string">a</span> <span class="hljs-string">file</span> <span class="hljs-string">exists</span> <span class="hljs-string">in</span> <span class="hljs-string">temp</span> <span class="hljs-string">and</span> <span class="hljs-string">fail</span> <span class="hljs-string">task</span> <span class="hljs-string">if</span> <span class="hljs-string">it</span> <span class="hljs-string">does</span><br>  <span class="hljs-attr">command:</span> <span class="hljs-string">ls</span> <span class="hljs-string">/tmp/file1</span><br>  <span class="hljs-attr">register:</span> <span class="hljs-string">result</span><br>  <span class="hljs-attr">failed_when:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">result.rc</span> <span class="hljs-string">==</span> <span class="hljs-number">0</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;&quot;No such&quot; not in result.stdout&#x27;</span><br>  <br><span class="hljs-comment"># 如果你想让任务在只满足任何一个条件时失败，将failed_when的定义修改为</span><br><br>  <span class="hljs-attr">failed_when:</span> <span class="hljs-string">result.rc</span> <span class="hljs-string">==</span> <span class="hljs-number">0</span> <span class="hljs-string">or</span> <span class="hljs-string">&quot;No such&quot;</span> <span class="hljs-string">not</span> <span class="hljs-string">in</span> <span class="hljs-string">result.stdout</span><br><span class="hljs-string">如果有太多的条件不能整齐地放在一行中，可以使用&quot;&gt;&quot;将其分割为多行yaml值:</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">example</span> <span class="hljs-string">of</span> <span class="hljs-string">many</span> <span class="hljs-string">failed_when</span> <span class="hljs-string">conditions</span> <span class="hljs-string">with</span> <span class="hljs-string">OR</span><br>  <span class="hljs-attr">shell:</span> <span class="hljs-string">&quot;./myBinary&quot;</span><br>  <span class="hljs-attr">register:</span> <span class="hljs-string">ret</span><br>  <span class="hljs-attr">failed_when:</span> <span class="hljs-string">&gt;</span><br><span class="hljs-string">    (&quot;No such file or directory&quot; in ret.stdout) or</span><br><span class="hljs-string">    (ret.stderr != &#x27;&#x27;) or</span><br><span class="hljs-string">    (ret.rc == 10)</span><br></code></pre></td></tr></table></figure><p>6、定义”改变”</p><p>Ansible允许你使用条件changed_when来定义一个特定的任务何时“changed”了一个远程节点。这让您可以根据返回代码或输出来决定是否应该在Ansible统计中报告更改，以及是否应该触发处理程序。<br>与Ansible中的所有条件一样，多个changed_when条件的列表使用隐式的“and”连接，这意味着任务只在满足所有条件时报告更改。</p><p>如果希望在满足任何条件时报告更改，则必须使用显式“or“在字符串中定义条件。例如:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Report</span> <span class="hljs-string">&#x27;changed&#x27;</span> <span class="hljs-string">when</span> <span class="hljs-string">the</span> <span class="hljs-string">return</span> <span class="hljs-string">code</span> <span class="hljs-string">is</span> <span class="hljs-string">not</span> <span class="hljs-string">equal</span> <span class="hljs-string">to</span> <span class="hljs-number">2</span><br>    <span class="hljs-attr">shell:</span> <span class="hljs-string">/usr/bin/billybass</span> <span class="hljs-string">--mode=&quot;take</span> <span class="hljs-string">me</span> <span class="hljs-string">to</span> <span class="hljs-string">the</span> <span class="hljs-string">river&quot;</span><br>    <span class="hljs-attr">register:</span> <span class="hljs-string">bass_result</span><br>    <span class="hljs-attr">changed_when:</span> <span class="hljs-string">&quot;bass_result.rc != 2&quot;</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">This</span> <span class="hljs-string">will</span> <span class="hljs-string">never</span> <span class="hljs-string">report</span> <span class="hljs-string">&#x27;changed&#x27;</span> <span class="hljs-string">status</span><br>   <span class="hljs-attr">shell:</span> <span class="hljs-string">wall</span> <span class="hljs-string">&#x27;beep&#x27;</span><br>   <span class="hljs-attr">changed_when:</span> <span class="hljs-literal">False</span><br><br><span class="hljs-string">你也可以组合多个条件来覆盖&quot;</span> <span class="hljs-string">changed</span> <span class="hljs-string">&quot;结果:</span><br><span class="hljs-string"></span><br><span class="hljs-string">- name: Combine multiple conditions to override &#x27;changed&#x27; result</span><br><span class="hljs-string">  command: /bin/fake_command</span><br><span class="hljs-string">  register: result</span><br><span class="hljs-string">  ignore_errors: True</span><br><span class="hljs-string">  changed_when:</span><br><span class="hljs-string">    -&#x27;&quot;</span><span class="hljs-string">ERROR&quot;</span> <span class="hljs-string">in</span> <span class="hljs-string">result.stderr&#x27;</span><br>    <span class="hljs-string">-result.rc</span> <span class="hljs-string">==</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>7、确保命令和shell成功</p><p>command 和shell模块关心返回码，所以如果你有一个成功退出码不为零的命令，你可以这样做:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><br><span class="hljs-attr">tasks:</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Run</span> <span class="hljs-string">this</span> <span class="hljs-string">command</span> <span class="hljs-string">and</span> <span class="hljs-string">ignore</span> <span class="hljs-string">the</span> <span class="hljs-string">result</span><br>    <span class="hljs-attr">shell:</span> <span class="hljs-string">/usr/bin/somecommand</span> <span class="hljs-string">||</span> <span class="hljs-string">/bin/true</span><br></code></pre></td></tr></table></figure><p>8、在所有主机上终止一个play</p><p>有时，您希望单个主机或一定百分比的主机出现failure，从而中止所有主机上的整个play。使用any_errors_fatal可以在第一次失败发生后停止<br>play执行。对于更细粒度的控制，您可以使用max_fail_percentage在给定百分比的主机失败后中止运行。</p><p>在第一个错误时中止：any_errors_fatal<br>如果你设置了any_errors_fatal并且一个任务返回了一个错误，Ansible会在当前批处理的所有主机上完成致命任务，然后停止在所有主机上执行剧</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">本。后续的任务和剧本不会被执行。你可以在play或block级别设置</span> <span class="hljs-attr">any_errors_fatal:</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">somehosts</span><br>  <span class="hljs-attr">any_errors_fatal:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">roles:</span><br>    <span class="hljs-string">-myrole</span><br><br><span class="hljs-string">通过向块中添加一个拯救部分，可以从致命错误中恢复运行。</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">somehosts</span><br>  <span class="hljs-attr">tasks:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">block:</span><br>    <span class="hljs-string">-include_tasks:</span> <span class="hljs-string">mytasks.yml</span><br>  <span class="hljs-attr">any_errors_fatal:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-string">当所有任务必须100%成功才能继续执行剧本时，您可以使用此特性。例如，如果您在多个数据中心的机器上运行一个服务，使用负载平衡器将流量从用户传递到服务，那么您希望在停止服务进行维护之前禁用所有负载平衡器。为了确保任务中任何禁用负载均衡器的失败都会停止所有其他任务:</span><br><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">load_balancers_dc_a</span><br>  <span class="hljs-attr">any_errors_fatal:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">tasks:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Shut</span> <span class="hljs-string">down</span> <span class="hljs-string">datacenter</span> <span class="hljs-string">&#x27;A&#x27;</span><br>      <span class="hljs-attr">command:</span> <span class="hljs-string">/usr/bin/disable-dc</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">frontends_dc_a</span><br>  <span class="hljs-attr">tasks:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Stop</span> <span class="hljs-string">service</span><br>      <span class="hljs-attr">command:</span> <span class="hljs-string">/usr/bin/stop-software</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Update</span> <span class="hljs-string">software</span><br>      <span class="hljs-attr">command:</span> <span class="hljs-string">/usr/bin/upgrade-software</span><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">load_balancers_dc_a</span><br>  <span class="hljs-attr">tasks:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Start</span> <span class="hljs-string">datacenter</span> <span class="hljs-string">&#x27;A&#x27;</span><br>     <span class="hljs-attr">command:</span> <span class="hljs-string">/usr/bin/enable-dc</span><br><br><span class="hljs-string">在这个例子中，只有当所有的负载均衡器都被成功禁用时，Ansible才会在前端启动软件升级。</span><br><br><span class="hljs-string">设置最大失败百分比：max_fail_percentage</span><br><span class="hljs-string">默认情况下，只要有主机没有发生故障，Ansible就会继续执行任务。在某些情况下，例如在执行滚动更新时，当达到一定的失败阈值时，您可能想要</span><br><span class="hljs-string">中止play。为了实现这一点，你可以设置play的最大失败百分比:</span><br><br><br><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">webservers</span><br>  <span class="hljs-attr">max_fail_percentage:</span> <span class="hljs-number">30</span><br>  <span class="hljs-attr">serial:</span> <span class="hljs-number">10</span><br><br><span class="hljs-string">max_fail_percentage设置在与serial一起使用时适用于每个批处理。在上面的例子中，如果第一批(或任何一批)服务器中的10个服务器中有3个以</span><br><span class="hljs-string">上失败，那么剩下的play将被中止。</span><br></code></pre></td></tr></table></figure><p>9、block</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs less">在说<span class="hljs-selector-tag">block</span>用法之前，先说一下<span class="hljs-selector-tag">ansible</span>的<span class="hljs-selector-tag">yaml</span>文件中判断的使用，符合<span class="hljs-keyword">when</span>的条件的时候，执行，不满足条件就不执行，例如：<br><br>- <span class="hljs-attribute">name</span>: <span class="hljs-keyword">when</span>用法举例<br>  <span class="hljs-attribute">hosts</span>: all<br>  <span class="hljs-attribute">tasks</span>:<br>  - <span class="hljs-attribute">name</span>: 修改文件权限<br>      <span class="hljs-attribute">file</span>: src=/root/test.txt.j2 dest=/opt/test.txt mode=<span class="hljs-number">0644</span><br>      <span class="hljs-attribute">when</span>: <span class="hljs-string">&#x27;$USER=root&#x27;</span><br><br>再来看block的例子：<br><br>- <span class="hljs-attribute">name</span>: block的用法<br>  <span class="hljs-attribute">hosts</span>: node<br>  <span class="hljs-attribute">tasks</span>:<br>  - <span class="hljs-attribute">debug</span>:<br>      <span class="hljs-attribute">msg</span>: <span class="hljs-string">&quot;task1 not in block&quot;</span><br>  - <span class="hljs-attribute">block</span>:<br>    - <span class="hljs-attribute">debug</span>:<br>            <span class="hljs-attribute">msg</span>: <span class="hljs-string">&quot;task2 in block1&quot;</span><br>    - <span class="hljs-attribute">debug</span>:<br>            <span class="hljs-attribute">msg</span>: <span class="hljs-string">&quot;task3 in block1&quot;</span><br>      <span class="hljs-attribute">when</span>: <span class="hljs-number">2</span> &gt; <span class="hljs-number">1</span><br>是的，当<span class="hljs-keyword">when</span>的判断语句一样时，可以将任务合并，写起来省力一点。<br>此外，block除了能和<span class="hljs-keyword">when</span>结合起来使用，还有一个很重要的功能，就是<span class="hljs-string">&quot;错误处理&quot;</span>功能。<br>不用block：<br>- <span class="hljs-attribute">hosts</span>: test<br>  <span class="hljs-attribute">remote_user</span>: root<br>  <span class="hljs-attribute">tasks</span>:<br>  - <span class="hljs-attribute">shell</span>: <span class="hljs-string">&#x27;cat /etc/redhat-release&#x27;</span><br>      <span class="hljs-attribute">register</span>: stdout_info<br>      <span class="hljs-attribute">ignore_errors</span>: true<br>      <span class="hljs-attribute">rescue</span>:<br>  - <span class="hljs-attribute">debug</span>:<br>        <span class="hljs-attribute">msg</span>: <span class="hljs-string">&#x27;I caught an error&#x27;</span><br>      <span class="hljs-attribute">when</span>: <span class="hljs-string">&#x27;stdout_info is failed&#x27;</span><br><br>使用block：<br><br>- <span class="hljs-attribute">hosts</span>: test<br>  <span class="hljs-attribute">remote_user</span>: root<br>  <span class="hljs-attribute">tasks</span>:<br>  - <span class="hljs-attribute">block</span>:<br>    - <span class="hljs-attribute">shell</span>: <span class="hljs-string">&#x27;cat /etc/redhat-release&#x27;</span><br>    <span class="hljs-attribute">rescue</span>:<br>    - <span class="hljs-attribute">debug</span>:<br>          <span class="hljs-attribute">msg</span>: <span class="hljs-string">&#x27;I caught an error&#x27;</span><br></code></pre></td></tr></table></figure><p>如上例所示，定义了一个block，这个block中有一个任务，这个任务在目标主机中执行了’‘cat &#x2F;etc&#x2F;redhat-release’’’命令，除了block关键字<br>，还有另外一个关键字rescue，rescue关键字与block关键字对齐，rescue的字面意思为”救援”，表示当block中的任务执行失败时，会执行<br>rescue中的任务进行补救，当然，在rescue中定义什么任务，是由你决定的。<br>也就是说当block中的任务出错时，会执行rescue中的任务，当block中的任务顺利执行时，则不会执行rescue中的任务。</p><p>你可能会问，使用block的方法完成”错误处理”的功能，似乎与使用failed的方法并没有什么不同，除了代码似乎”精简”了一点，block还有其他优势<br>么？其实，使用block的方式还是有一定优势的，当block中有多个任务时，这种优势就比较明显了：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">testuser</span><br>  <span class="hljs-attr">remote_user:</span> <span class="hljs-string">root</span><br>  <span class="hljs-attr">tasks:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">block:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">debug:</span><br>          <span class="hljs-attr">msg:</span> <span class="hljs-string">&#x27;I execute normally&#x27;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">command:</span> <span class="hljs-string">/bin/false</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">debug:</span><br>          <span class="hljs-attr">msg:</span> <span class="hljs-string">&#x27;I never execute, due to the above task failing&#x27;</span><br>    <span class="hljs-attr">rescue:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">debug:</span><br>          <span class="hljs-attr">msg:</span> <span class="hljs-string">&#x27;I caught an error&#x27;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">command:</span> <span class="hljs-string">/bin/false</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">debug:</span><br>          <span class="hljs-attr">msg:</span> <span class="hljs-string">&#x27;I also never execute&#x27;</span><br>    <span class="hljs-attr">always:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">debug:</span><br>          <span class="hljs-attr">msg:</span> <span class="hljs-string">&quot;This always executes&quot;</span><br>    <span class="hljs-attr">when:</span> <span class="hljs-number">2</span><span class="hljs-string">&gt;1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ansible</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ansible</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ansible-简单使用</title>
    <link href="/2023/03/11/ansible-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/03/11/ansible-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<ol><li><p>关闭 host_key_check<br>host_key_checking &#x3D; False 可以避免初次连接主机,提示 yes&#x2F;no ?</p></li><li><p>开启日志记录<br>log_path &#x3D; &#x2F;var&#x2F;log&#x2F;ansible.log</p></li><li><p>模块</p></li></ol><p>creates 存在就不执行<br>removes 不存在才执行</p><p>ansible websrv -a ‘creates&#x3D;&#x2F;etc&#x2F;fstab cat &#x2F;etc&#x2F;fstab’<br>ansible websrv -a ‘removes&#x3D;&#x2F;etc&#x2F;fstsab cat &#x2F;etc&#x2F;fstab’</p><p>默认的command 模块 不支持一些特殊的字符 &lt;&gt; | ; &amp; 需要改用shell模块.</p><p>推送执行脚本模块 script ,将ansible 中心服务器的脚本推送到目标服务器,并执行,返回结果.<br>ansible all -m script -a ‘&#x2F;root&#x2F;ansible&#x2F;host.sh’<br>&#x2F;root&#x2F;ansible&#x2F;host.sh 为ansible要执行的脚本 所在位置.</p><p>copy 文件推送模块<br>ansible 192.168.0.104 -m copy  -a ‘src&#x3D;&#x2F;etc&#x2F;shadow dest&#x3D;&#x2F;tmp&#x2F; mode&#x3D;644 owner&#x3D;test1 backup&#x3D;yes’</p><p>fetch 文件从客户端回传到管控服务器</p><h2 id="指定hosts文件"><a href="#指定hosts文件" class="headerlink" title="指定hosts文件"></a>指定hosts文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ./host<br>172.20.0.21<br>172.20.0.22<br>172.20.0.23<br>172.20.0.24<br><br>ansible -i ./host all -m ping<br></code></pre></td></tr></table></figure><h2 id="推送sudo规则"><a href="#推送sudo规则" class="headerlink" title="推送sudo规则"></a>推送sudo规则</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ansible -i ./host_reday_modify_mjq all -m shell -a <span class="hljs-string">&quot;echo &#x27;deploy ALL=(ALL) NOPASSWD: ALL&#x27;  &gt;&gt; /etc/sudoers&quot;</span><br></code></pre></td></tr></table></figure><h2 id="复制远程文件到本地"><a href="#复制远程文件到本地" class="headerlink" title="复制远程文件到本地"></a>复制远程文件到本地</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ansible -i ./tmp_host all -m fetch -a <span class="hljs-string">&quot;src=/root/kubernetes-server-linux-amd64.tar.gz dest=/opt/ljb/kubernetes-server-linux-amd64.tar.gz&quot;</span><br>ansible -i ./tmp_host all -m fetch -a <span class="hljs-string">&quot;src=/data/ocr-log/fenqi-ocr.2019-06* dest=/opt/ljb/api_log/&quot;</span><br></code></pre></td></tr></table></figure><h2 id="复制本地文件到客户端"><a href="#复制本地文件到客户端" class="headerlink" title="复制本地文件到客户端"></a>复制本地文件到客户端</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">ansible -i ./tmp_host all -m copy -a <span class="hljs-string">&quot;src=/opt/ljb/kubernetes-server-linux-amd64.tar.gz/172.20.4.40/root/kubernetes-server-linux-amd64.tar.gz dest=/root/soft/kubernetes-server-linux-amd64.tar.gz&quot;</span><br><br>ansible -i ./tmp_host all -m copy -a <span class="hljs-string">&quot;src=/opt/ljb/soft/AliSQL-master.zip dest=/usr/local/src/AliSQL-master.zip&quot;</span><br><br>ansible -i ./tmp_host all -m copy -a <span class="hljs-string">&quot;src=/opt/ljb/soft/jemalloc-4.0.4.tar.bz2 dest=/usr/local/src/jemalloc-4.0.4.tar.bz2&quot;</span><br><br>ansible -i ./tmp_host all -m copy -a <span class="hljs-string">&quot;src=/opt/ljb/soft/zlib-1.2.11.tar.gz dest=/usr/local/src/zlib-1.2.11.tar.gz&quot;</span><br><br>ansible -i ./tmp_host all -m copy -a <span class="hljs-string">&quot;src=/opt/ljb/elastic-job-lite-console.tar.gz dest=/opt/elastic-job-lite-console.tar.gz&quot;</span><br></code></pre></td></tr></table></figure><h2 id="include-和-import"><a href="#include-和-import" class="headerlink" title="include 和 import"></a>include 和 import</h2><p>include 语句和 import 语句非常相似，但是 Ansible executor 引擎对待它们的方式非常不同。</p><p>All import* statements are pre-processed at the time playbooks are parsed.</p><p>所有 import * 语句都是在解析 playbook 时预处理的。</p><p>All include* statements are processed as they are encountered during the execution of the playbook.</p><p>所有 include * 语句都在剧本执行过程中遇到时进行</p><h2 id="role-角色使用"><a href="#role-角色使用" class="headerlink" title="role 角色使用"></a>role 角色使用</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">webservers</span><br>  <span class="hljs-attr">roles:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">common</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">webservers</span><br></code></pre></td></tr></table></figure><h2 id="查看主机的-ansible-facts-信息"><a href="#查看主机的-ansible-facts-信息" class="headerlink" title="查看主机的 ansible_facts 信息"></a>查看主机的 ansible_facts 信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ansible -i host.ini 190.15.0.74 -m setup<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ansible</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ansible</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ansible-变量优先级</title>
    <link href="/2023/03/11/ansible-%E5%8F%98%E9%87%8F%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    <url>/2023/03/11/ansible-%E5%8F%98%E9%87%8F%E4%BC%98%E5%85%88%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<p>ansible中变量的优先级</p><p>extra vars （-e 选项指定的变量）最高<br>inventory 主机清单中定义的变量（ansible_ssh_user等)<br>play剧本中vars&#x2F;vars_files定义的变量<br>系统的facts变量<br>角色定义的默认变量 最低<br>从上到下优先级逐渐降低，高优先级会覆盖掉低优先级的变量</p><p>变量的优先级<br>变量的优先级指的是优先级越高的会覆盖优先级低的，下边的优先级由低到高进行排列：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs text">role defaults<br>inventory vars<br>inventory group_vars<br>inventory host_vars<br>playbook group_vars<br>playbook host_vars<br>host facts<br>play vars<br>play vars_prompt<br>play vars_files<br>registered vars<br>set_facts<br>role and include vars<br>block vars (only for tasks in block)<br>task vars (only for the task)<br>extra vars (always win precedence)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ansible</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ansible</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
